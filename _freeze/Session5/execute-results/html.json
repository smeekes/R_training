{
  "hash": "f0ab384a6763c94ec742ed74eff770bf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to R\"\nsubtitle: \"Session 5\"\nauthor: \"\"\nfilters:\n  - diagram\ndiagram:\n  engine:\n    tikz:\n      header-includes:\n        - '\\usepackage{adjustbox,xcolor}'\n        - '\\usetikzlibrary{arrows, shapes}'\n        - '\\definecolor{UMdblue}{RGB}{0,28,61}'\n        - '\\definecolor{UMlblue}{RGB}{0,162,219}'\n        - '\\definecolor{UMorangered}{RGB}{232,78,16}'\n        - '\\definecolor{UMorange}{RGB}{243,148,37}'\n        - '\\definecolor{UMred}{RGB}{174,11,18}'\n---\n\n\n\n# Session Overview\n\n1.  [Basics of Data Manipulation](#dataman1)\n2.  [Regression Analysis](#reg1)\n3.\t[Bonus: Tidyverse](#dataman2)\n\n# Basics of Data Manipulation {#dataman1}\n\n## Data Manipulation\nIn the last session, we learned how to load data of various sources into R. \n\nToday's first part will be about how to manipulate data in R. Importantly, we will learn how to\n\n- select certain variables from a data \n- subset a data set\n- recode and rename certain variables\n\nWe will work with fictive data set of student grades. Let us start by loading the data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_grades <- read.table(\"data/grades.csv\", \n                       header = TRUE, sep = \",\", stringsAsFactors = FALSE)\n```\n:::\n\n\n\n## Selecting Variables\nWe begin with selecting interesting variables from a data set. For our grades data set, we want to preserve information about `ID`, `Name`, and `Exam_Score`, and drop all other information. \n\nVariables can be selected by name, after which we inspect the first and last three rows in the data set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data_grades[, c(\"ID\", \"Name\", \"Exam_Score\")] \nhead(data, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      ID                Name Exam_Score\n1 i40333 Hyden-Terry, Dakota         55\n2 i41204     Polson, Destiny         82\n3 i41428       al-Azad, Nuha         52\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(data, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        ID             Name Exam_Score\n40 i198051      Nies, Tyler         62\n41 i198310 Montano, Marquez         72\n42 i198859  Nyberg, Bich Sa         91\n```\n\n\n:::\n:::\n\n\n\n## Selecting Variables\nOr by variable indexes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1 <- data_grades[, c(1, 2, 7)] \n```\n:::\n\n\nthough this is not that convenient unless you know the column numbers of the variables you want to select.\n\nA more convenient alternative is to use the following function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2 <- subset(data_grades, select = c(ID, Name, Exam_Score))\n```\n:::\n\n\n\nThe objects data, data1 and data2 are all identical so you can use your preferred way of working!\n\n## Subsetting Rows\nNext, we want to subset the data set, i.e. preserve interesting rows while removing the others. \n\nFor the grades data set, we might be interested in information about students in tutorial group 1: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# select tutorial 1 students only\ndata_tutorial1 <- data_grades[data_grades$Tutorial == 1, ]\n```\n:::\n\n\nor alternatively:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_tutorial1 <- subset(data_grades, Tutorial == 1)\n```\n:::\n\n\n\nSubsetting also works using characters. For instance, to retrieve only information for females:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# select female students only\ndata_females <- data_grades[data_grades$Gender == 'Female', ]\n```\n:::\n\n\n\nInspect your new data sets!\n\n## Exercise 5.1\n\nUse the grades data set.\n\n1. Generate a data set that contains information about the student ID, student name,  their tutorial group, participation grade and their exam score.\n\n2. Reduce the data set to only display information of students in tutorial group 4\n\n3. Further reduce the data set to only display information of students in tutorial group 4 with an exam score of more than 80. How many such students are there? \nHint: You can use a logical operator when subsetting!\n\n## Transforming Variables \nLet us continue with further data manipulations. The variable tutorial is currently an integer:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(data_grades$Tutorial)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\nbut it should be a factor (a categorical variable). This can be easily changed in R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_grades$Tutorial <- as.factor(data_grades$Tutorial)\n```\n:::\n\n\nafter which you can inspect its new class:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(data_grades$Tutorial)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n:::\n\n\n\n## Transforming Variables \nWhen inspecting the variable itself, R now mentions the different levels of the factors:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_grades$Tutorial\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 2 3 4 2 1 4 3 1 1 3 4 2 4 4 3 1 3 4 1 2 1 1 3 1 3 3 2 3 2 1 4 4 4 2 3 2 2 4\n[39] 4 2 1 3\nLevels: 1 2 3 4\n```\n\n\n:::\n:::\n\n\nwhich you can also directly retreive via:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(data_grades$Tutorial)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1\" \"2\" \"3\" \"4\"\n```\n\n\n:::\n:::\n\n\n\n## Adding Variables\nSometimes we want to add a variable to an existing data set. \n\nFor instance, we want to add the exam score on 10 instead of 100. To add a new variable, use the `$` operator and specify a new variable name:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_grades$Exam_Score_10 <- data_grades$Exam_Score/10 \n\nhead(data_grades[, c(\"Exam_Score\", \"Exam_Score_10\")], 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Exam_Score Exam_Score_10\n1         55           5.5\n2         82           8.2\n3         52           5.2\n```\n\n\n:::\n:::\n\n\n\n## Exercise 5.2\n\n1. What is the class of the variable Tutor? Transform it into a factor. How many tutors are there?\n\n2. Add a new variable to compute the final score of each student, which is the weighted average of their participation grade (20%) and their exam score (80%)\n\n3. Retrieve the final score of the students in tutorial group 2. Obtain summary statistics of their final scores.\n\n4. What is the lowest and the highest score in tutorial group 2? Retrieve this information from the summary statistics as well as by using a dedicated function.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}