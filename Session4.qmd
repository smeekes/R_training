---
title: "Introduction to R"
subtitle: "Session 4"
author: ""
filters:
  - diagram
diagram:
  engine:
    tikz:
      header-includes:
        - '\usepackage{adjustbox,xcolor}'
        - '\usetikzlibrary{arrows, shapes}'
        - '\definecolor{UMdblue}{RGB}{0,28,61}'
        - '\definecolor{UMlblue}{RGB}{0,162,219}'
        - '\definecolor{UMorangered}{RGB}{232,78,16}'
        - '\definecolor{UMorange}{RGB}{243,148,37}'
        - '\definecolor{UMred}{RGB}{174,11,18}'
---

## Session Overview

1.  [Inputs and Outputs](#io)
2.	[Graphics](#graphics)
3.  [Bonus: Advanced Graphics with ggplot](#ggplot)

## Today 

#### Nalan Bastürk

:::: {.columns}

::: {.column width="40%"}
![](figures/nalan.jpg){width=50%}

:::

::: {.column width="60%"}
- Associate Professor at QE
- Research interests: econometrics, Bayesian statisics, financial econometrics
- [Website](https://www.maastrichtuniversity.nl/n-bast%C3%BCrk)
- Sessions 4 and 5
:::

::::

#### Stephan Smeekes

:::: {.columns}

::: {.column width="40%"}
![](figures/stephan.jpg){width=50%}

:::

::: {.column width="60%"}
- Professor of Econometrics at QE
- Research interests: econometrics, time series, high-dimensional statisics, bootstrap, macro- and climate econometrics 
- [Website](https://stephansmeekes.com)
- Sessions 2, 3 and 4
:::

::::

## Inputs and outputs of your R session
  - Common inputs / outputs of an R session are datasets or R scripts.
  - For this meeting we focus on datasets as inputs to the R session, loading data and saving data.
  - The file format (csv, Rdata, xls, stata ...) and directory of the files are important keep in mind.
  - We will go over a few options, potential issues, and how to avoid the need to type in a long directory name when managing the input and output of the R session.
  
## Working directories and R projects
  - Whenever we provide R with a file name, it can include the full path on the computer.
  - An alternative is to work on a specified directory.
  - Another alternative is to work within a 'project' that all paths are visible to the project scripts.
  - If we do not provide any path, R will use the current “working directory” for reading or writing files. It can be obtained by the command 

```{r, eval=FALSE}
  getwd()
```

## Using the correct directory to get input / output of the R session
- Navigating through the menus in RStudio is easy, (click and go) but requires using the menu every time the user runs the code.
- Go to *Session* -> *Set Working Directory*. Two convenient options are:  

  +  *Choose Directory...*: Choose the directory yourself

  + *To Source File Location*: Set the working directory to the directory where your **R** Script (the source file) is saved

![](figures/R-script-5.png)
  <!-- - In top panel in R layout, `Session -> Set working directory /  choose directory' to navigate to the correct directory. -->

  <!-- ![](figures/dir1.png)   -->

## Using the correct directory to get input / output of the R session
  - An alternative is to use function setwd() at the beginning of your script. This line then has to be changed when the code runs in another machine.
```{r, eval=FALSE}
 setwd("~/ownCloud (2)/Teaching/Rprogramming_UM/Rprogramming_UM")
```

## Using the correct directory to get input / output of the R session

- Recall: To set the working directory to the folder where your current R script is located, you can simply use:
```{r, eval=FALSE}
library(this.path)
setwd(here()))
```

- Recall: We could also explicitly make the function call from the library:
```{r, eval=FALSE}
setwd(this.path::here()))
```

## Types of input or data that can be loaded in R
R interacts with files in several ways.

  - You can load, save, import, or export a data file. 
  - You can save a generated figure as a graphics file or store regression tables as text, spreadsheet, or LATEX tables.
  - You can load, save the full workspace (environment) you are working with to follow up another time.
  
  Datasets can come in different formats.
  
  - Rdata files: Files that can directly 
  - Other file formats (SPSS csv, xls, ...) are also possible to load in R. This often requires the use of packages

## Loading Rdata files
  - Rdata files are specific to R file formats. 
  - They can store a single object or several objects. 
  - These files are the easiest to manage as input or output in R, since they don't require library calls.

## Load climate data from RData format:
  - load function is used to load data in Rdata format.
  - load function loads all objects in the input Rdata file.

```{r}
load("data/climate_Maas_Eind.Rdata")
print(summary(data_short))
```
  
## Load climate data from RData format:
  - You can assign the loaded data to a new variable

```{r}
data <- load("data/climate_Maas_Eind.Rdata")
```

## Loading other formats of data in R
Option 1: Using menus within RStudio is the easiest (click and go) but requires using the menu every time the user runs the code.
  
![](figures/load1.png)  
  
## Loading other formats of data in R
Option 1: Using menus within RStudio (cont'd)
  
![](figures/load2.png)  
  
## Loading other formats of data in R
Option 1: Using menus within RStudio (cont'd)
  
![](figures/load3.png)  

## Loading other formats of data in R
Option 1: Using menus within RStudio (cont'd)
![](figures/load4.png)  

## Loading other formats of data in R

Advice for option 1: 

  - Copy the command that appears after loading the data from the menus. 

![](figures/load5.png)  

## Loading other formats of data in R

Advice for option 1 (cont'd): 

  - Paste the command on top of your script.
  - This way, next time you do not need the menu navigation.

```{r eval=FALSE}
library(readxl)
climate <- read_excel("data/climate.xlsx")
```
  - You can view the data by clicking on it in the `Environment' at the top-right of the workspace. 

## General way of importing and exporting of other data formats

  - Using the correct libraries for different data formats can be tedious.
  - R package rio is very convenient for data import and export. It figures out the type of data format from the file name extension, e.g. *.csv for CSV, *.dta for Stata, or *.sav for SPSS data sets
  - For a complete list of supported formats, see help(rio). 
  - It calls an appropriate package to do the actual importing or exporting. 
  
## Loading SPSS and other file types
```{r eval=FALSE}
library('rio')
import("data/climate.dta")
```

## Loading csv files
```{r eval=FALSE}
import("data/climate.csv")
```

## Outputs

- Outputs work very similarly to the inputs above.
- The most relevant outputs formats are the R output formats.
- `save()` saves objects as an `.RData` file.
- `save.image()` saves a selection of objects as an `.RData` file.

## Exercise 4.1: Saving data
- Save your current workspace using function `save.image()`.
- Save only one variable in the workspace using function `save()`.
- Make a list of two variables from `data_short`, and save this list using function `save`.
<!-- save.image('myoutput.Rdata') -->
<!-- save(climate, 'myclimatedata.Rdata') -->
<!-- myoutput <- list(data_short$NAME, data_short$LATITUTE) -->
<!-- save(myoutput, 'myclimatedata.Rdata') -->

## R Base Graphics

-   We will cover R base graphics.
-   Other alternatives include `ggplot2'...

To create plots with R's standard `graphics` package, there are *high-level* and *low-level* plotting functions. 

- *High-level* functions generate a new graphic (and open a *device*). 
- *Low-level* functions add elements to an existing graphic.

## Simple plots

```{r}
plot(data_short$MAX)     ## Plotting a single variable
plot(x = data_short$YEAR, y = data_short$MAX)     ## Scatter plot
```

## Multiple plots

```{r}
par(mfrow = c(1,2)) # multiple plots in a row
plot(data_short$MAX)     ## Plotting a single variable
plot(x = data_short$YEAR, y = data_short$MAX)     ## Scatter plot
```

## Functions calling methods
Notice that function `plot()` calls methods. 

It will perform different operations depending on the class of the passed object. (We study the `lm()` function in detail in the next session!)

```{r}
ols_result <- lm(MAX~YEAR, data = data_short)
plot(ols_result)
```

## Creating and saving a graph

```{r, eval=FALSE}
pdf("outputs/plot_data_short.pdf")                  
hist(data_short$MAX, breaks = 20)
dev.off()
```
## Customizing Graphics

- Adding points to an existing plot
- Function `dev.off()'is called after all the plotting, to save the file and return control to the screen.

```{r, eval=FALSE}
plot(data_short$MAX, type = "l") ## Lines
points(data_short$MAX)
```

## Customizing Graphics
- The `plot()` function takes several many arguments that can change the layout of the plots. See `?par` for all graphical options; there are many!

- Some examples:

  + `col`: color of lines / points
  + `lty`, `lwd`: Line type and thickness
  + `pch`: Point type (1-16)
  + `main`, `sub`: Title, subtitle
  + `xlab`, `ylab`: x and y axis labels
  + `log`, `xlog` and `ylog` for logarithmic scales
  + `xlim`, `ylim`: x and y axis limits (for overriding R's default choices)
  + `mfcol`, `mfrow`: Multiple plots in one graphics window (column-wise/row-wise)

## Low-Level Graphic Functions

 - `lines`: Draw lines
 - `abline`: Quickly add horizontal, vertical lines, and lines using equation $y = bx + a$
 - `points`: Add points
 - `arrows`: Add arrows
 - `title`: Add a title
 - `legend`: Add a legend
 - `text`: Add text at $(x,y)$ coordinates
 - `mtext`: Add text with positional specification like `side=1,...,4`
---

## Exercise 4.2: Plot maximum temperatures for Maastricht

We want to visualize the daily maximum temperatures in the climate data `data_short` specifically for Maastricht. First, make a basic plot of variable and `MAX` then customise the plot in the following ways:

1. The title of the X-axis should say 'Year', the title of the Y-axis 'Maximum Temperature'.

2. Make the plot a line plot with a blue line. (Hint: specifying the colour literally as `"blue"` works)

3. Make the tick marks appear on the inside of the figure rather than the outside. 

4. Calculate the average temperature. 

5. Add a horizontal line with the average maximum temperature

You will need to consult the help file for this exercise; see this therefrom more as an exercise in how to navigate R's help system, than an exercise in plotting (which we will cover in more detail later).

You may want to ask ChatGPT for help and then try to see if you could also have gotten the same answer yourself; it may not always give you the most straightforward answer though!

<!-- ind <- data_short[,3] == "MAASTRICHT" -->
<!-- data_Maas <- data_short[ind,]  -->
<!-- plot(data_Maas$MAX, type = 'l', col = 'blue', tck = 0.05) -->
<!-- mean_max <- mean(data_Maas$MAX) -->
<!-- abline(h = mean_max) -->

## Manually saving R plots

 - Use the plot functions without creating a graph.
 - Use the `plots' area to save image manually.

```{r, eval=FALSE}
plot(x = data_short$YEAR, y = data_short$MAX)     
``` 

## Different plot types

You can manually save graphs of several formats.

Best practice is to save a graph through a device such as pdf or similar:

- `pdf()`: Adobe PDF (easily integrated into LaTeX). 
- `svg()`: Scalable Vector Graphics (commonly used on websites). 
- `png()`, `jpeg()`, `tiff()`, `bmp()`: Various bitmap formats.

```{r, eval=FALSE}
jpeg("outputs/plot_data_short.jpeg")                  
plot(x = data_short$YEAR, y = data_short$MAX)   
dev.off()
```

<!-- THEY HAVE PROBABLY NOT SEEN LOOPS!!! -->
<!-- ## Exercise 4.4: Make a continuous plot of maximum temperatures in Maastricht -->

<!-- - In this exercise we want to visualise the data over time as if data are gradually becoming available. -->
<!-- - Select a starting sample of the data for Maastricht.  -->
<!-- - Make a for loop to get increasing windows of the data. -->
<!-- - Expand your plot with new data within the for loop. -->

<!-- # Create plot window -->
<!-- plot(1:1000, data_Maas$MAX[1:100], xlim = c(1, nrow(data_Maas)), ylim = range(data_Maas$MAX),
     xlab = "Time", ylab = "Value", main = "Adding Data Over Time", type = 'l') -->
<!-- # Gradually add points -->
<!-- ind <- data_short[,3] == "MAASTRICHT" -->
<!-- data_Maas <- data_short[ind,]  -->
<!-- for (i in 1001:nrow(data_Maas)) { -->
<!--   lines(1:i, data_Maas$MAX[1:i], col = "steelblue") -->
<!--   Sys.sleep(0.05)  # Pause to simulate "gradual" effect -->
<!-- } -->

# Bonus: Advanved Graphics using ggplot

## Exercise 4.3: Use other packages for plots

- Make the same plot in R using package `ggplot2'
- You may want to use ChatGBT since the syntax of `ggplot2' is quite different from what we covered so far.

<!-- library(ggplot2) -->
<!-- ind <- data_short[,3] == "MAASTRICHT" -->
<!-- data_Maas <- data_short[ind,]  -->
<!-- # Add an index to identify each observation -->
<!-- data_Maas$index <- 1:nrow(data_Maas) -->
<!-- mean_max <- mean(data_Maas$MAX) -->
<!-- # Line plot: index vs. mpg -->
<!-- ggplot(data_Maas, aes(x = index, y = MAX)) + -->
<!--   geom_line(color = "steelblue", size = 1) + -->
<!--   geom_point(color = "steelblue") + -->
<!--   geom_hline(yintercept = mean_max, color = "red", linetype = "dashed", size = 1)  -->
<!--   labs(title = "Max temp. in Maastricht", -->
<!--        x = "Observation Index", -->
<!--        y = "Max temperature")  -->


