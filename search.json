[
  {
    "objectID": "about-team.html",
    "href": "about-team.html",
    "title": "R Training Coordination Team",
    "section": "",
    "text": "Nalan Basturk\nTobias Hartl\nMartin Schumann\nStephan Smeekes\nInes Wilms\n\nAll are econometricians at the Department of Quantitative Economics, and have many years of experience in R.\n\nNalan Bastürk\n\n\n\n\n\nAssociate Professor at QE\nResearch interests: econometrics, Bayesian statisics, financial econometrics\nWebsite\n\n\n\n\n\nTobias Hartl\n\n\n\n\n\nAssistant Professor at QE\nResearch interests: econometrics, state space and factor models, long memory, macro- and climate econometrics\nWebsite\n\n\n\n\n\nMartin Schumann\n\n\n\n\n\nAssistant Professor at QE\nResearch interests: panel data, nonlinear models, difference-in-differences, network data, innovation\nWebsite\n\n\n\n\n\nStephan Smeekes\n\n\n\n\n\nProfessor of Econometrics at QE\nResearch interests: econometrics, time series, high-dimensional statisics, bootstrap, macro- and climate econometrics\nWebsite\n\n\n\n\n\nInes Wilms\n\n\n\n\n\nAssociate Professor at QE\nResearch interests: econometrics, time series, high-dimensional statisics, forecasting, outlier robustness\nWebsite"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SBE R Training",
    "section": "",
    "text": "Welcome to the homepage of the SBE R training! Here you will find the slides for the sessions, and any additional files needed (such as datasets). You can also find some information about the team organising the training as well as the purpose of the training.\n\nSessions\n\nSession 1\n\nFurther sessions will follow later.\n\n\n\n\nReuseNothing in this publication may be reproduced and/or made public by means of printing, offset, photocopy or microfilm or in any digital, electronic, optical or any other form without the prior written permission of the owner of the copyright.CopyrightMaastricht University School of Business and Economics & R Training Coordination Team"
  },
  {
    "objectID": "Session3.html#today",
    "href": "Session3.html#today",
    "title": "Introduction to R",
    "section": "Today",
    "text": "Today\nStephan Smeekes\n\n\n\n\n\nProfessor of Econometrics at QE\nResearch interests: econometrics, time series, high-dimensional statisics, bootstrap, macro- and climate econometrics\nWebsite\nSessions 2, 3 and 4\n\n\nInes Wilms\n\n\n\n\n\nAssociate Professor at QE\nResearch interests: econometrics, time series, high-dimensional statisics, forecasting, outlier robustness\nWebsite\nSessions 1, 3 and 5"
  },
  {
    "objectID": "Session3.html#functions-1",
    "href": "Session3.html#functions-1",
    "title": "Introduction to R",
    "section": "Functions",
    "text": "Functions\nWe have already encountered several functions in R:\n\nsetwd()\nsqrt()\nprint()\nseq()\nrep()\nrnorm()"
  },
  {
    "objectID": "Session3.html#function-overview",
    "href": "Session3.html#function-overview",
    "title": "Introduction to R",
    "section": "Function Overview",
    "text": "Function Overview\n\n\nA function consists of three parts:"
  },
  {
    "objectID": "Session3.html#arguments",
    "href": "Session3.html#arguments",
    "title": "Introduction to R",
    "section": "Arguments",
    "text": "Arguments\n\nA function is called by specifying the function name followed by one or more comma-separated arguments in parentheses:\n\n\nfunction_name(argument1 = value1, argument2 = value2, ...)\n\n\nThis gives the same:\n\n\nfunction_name(argument2 = value2, argument1 = value1, ...)\n\n\nThis also gives the same:\n\n\nfunction_name(value1, value2, ...)\n\n\nThis does not!\n\n\nfunction_name(value2, value1, ...)\n\n\nWhy?"
  },
  {
    "objectID": "Session3.html#more-about-arguments",
    "href": "Session3.html#more-about-arguments",
    "title": "Introduction to R",
    "section": "More about Arguments",
    "text": "More about Arguments\n\nIf you don’t give argument names, R assumes arguments are given in the order as defined.\nThere are also default arguments, which do not always need to be specified.\nLet us look at an example: calculating the logarithm using the log function:\n\nfake_data &lt;- c(1, 1, 2, 3, 5, 8, 13, 21)\n1log_exp_data &lt;- log(fake_data)\n2log_2_data &lt;- log(fake_data, base = 2)\n\n1\n\nCalculates the natural logarithm;\n\n2\n\nCalculates the logarithm with base 2.\n\n\n\nUse the help files to understand function arguments"
  },
  {
    "objectID": "Session3.html#r-help-pages",
    "href": "Session3.html#r-help-pages",
    "title": "Introduction to R",
    "section": "R help pages",
    "text": "R help pages\n\nprovide detailed descriptions, arguments, return values, etc. for R packages, functions\ninclude usage examples that demonstrate how to use the function effectively\nare directly accessible in RStudio"
  },
  {
    "objectID": "Session3.html#r-help",
    "href": "Session3.html#r-help",
    "title": "Introduction to R",
    "section": "R Help",
    "text": "R Help\nHelp files are displayed in the Help window in the bottom right window below"
  },
  {
    "objectID": "Session3.html#accessing-r-help",
    "href": "Session3.html#accessing-r-help",
    "title": "Introduction to R",
    "section": "Accessing R Help",
    "text": "Accessing R Help\nTo open the help file for a specific R function, for instance the function log(), you can use either of the following two commands:\n\nhelp(log)\n?log\n\nBoth commands above to the same: they open the help file of the function you specified. Note that R searches for an exact! match and will only open the R Help page if the function exists."
  },
  {
    "objectID": "Session3.html#exercise-3.1-r-help",
    "href": "Session3.html#exercise-3.1-r-help",
    "title": "Introduction to R",
    "section": "Exercise 3.1: R Help",
    "text": "Exercise 3.1: R Help\n\nExecute the following code:\n\n\n?log\n\nR should open the help page for the function with name log. No need to go over the help page in detail, we explore this in detail\n\nExecute the following code:\n\n\n?logarithm\n\nR should tell you that no documentation for the requested function exists. It did not find an exact match to the function logarithm(). It does give you a recommendation to try something instead…\n\nNamely to try this:\n\n\n??logarithm\n\nR performs a full-text search of the help system for all documentation that mentions the term logarithm.\nWhile the search with the command ? is thus useful to directly access the help page of an R function you know exists, the broader help search with the command ?? is useful if you are not sure about the exact name of a function."
  },
  {
    "objectID": "Session3.html#understanding-the-log-function",
    "href": "Session3.html#understanding-the-log-function",
    "title": "Introduction to R",
    "section": "Understanding the log function",
    "text": "Understanding the log function\nExecute the command ?log. It gives something like this:"
  },
  {
    "objectID": "Session3.html#understanding-the-log-function-1",
    "href": "Session3.html#understanding-the-log-function-1",
    "title": "Introduction to R",
    "section": "Understanding the log function",
    "text": "Understanding the log function\nExecute the command ?log. It gives something like this:"
  },
  {
    "objectID": "Session3.html#understanding-the-log-function-2",
    "href": "Session3.html#understanding-the-log-function-2",
    "title": "Introduction to R",
    "section": "Understanding the log function",
    "text": "Understanding the log function\nExecute the command ?log. It gives something like this:"
  },
  {
    "objectID": "Session3.html#understanding-the-log-function-3",
    "href": "Session3.html#understanding-the-log-function-3",
    "title": "Introduction to R",
    "section": "Understanding the log function",
    "text": "Understanding the log function\nExecute the command ?log. It gives something like this:"
  },
  {
    "objectID": "Session3.html#understanding-the-log-function-4",
    "href": "Session3.html#understanding-the-log-function-4",
    "title": "Introduction to R",
    "section": "Understanding the log function",
    "text": "Understanding the log function\nExecute the command ?log. It gives something like this:"
  },
  {
    "objectID": "Session3.html#understanding-the-log-function-5",
    "href": "Session3.html#understanding-the-log-function-5",
    "title": "Introduction to R",
    "section": "Understanding the log function",
    "text": "Understanding the log function\nExecute the command ?log. It gives something like this:"
  },
  {
    "objectID": "Session3.html#understanding-the-log-function-6",
    "href": "Session3.html#understanding-the-log-function-6",
    "title": "Introduction to R",
    "section": "Understanding the log function",
    "text": "Understanding the log function\nExecute the command ?log. It gives something like this:"
  },
  {
    "objectID": "Session3.html#understanding-the-log-function-7",
    "href": "Session3.html#understanding-the-log-function-7",
    "title": "Introduction to R",
    "section": "Understanding the log function",
    "text": "Understanding the log function\nExecute the command ?log. It gives something like this:"
  },
  {
    "objectID": "Session3.html#input-and-output-of-the-log-function",
    "href": "Session3.html#input-and-output-of-the-log-function",
    "title": "Introduction to R",
    "section": "input and output of the log function",
    "text": "input and output of the log function\n\nNote how the log function preserves the object type of the input:\n\n\nfake_data &lt;- c(1, 1, 2, 3, 5, 8, 13, 21)\nlog(fake_data)\n\n[1] 0.0000000 0.0000000 0.6931472 1.0986123 1.6094379 2.0794415 2.5649494\n[8] 3.0445224\n\nfake_data_matrix &lt;- matrix(fake_data, nrow = 4)\nlog(fake_data_matrix)\n\n          [,1]     [,2]\n[1,] 0.0000000 1.609438\n[2,] 0.0000000 2.079442\n[3,] 0.6931472 2.564949\n[4,] 1.0986123 3.044522"
  },
  {
    "objectID": "Session3.html#exercise-3.2-function-arguments",
    "href": "Session3.html#exercise-3.2-function-arguments",
    "title": "Introduction to R",
    "section": "Exercise 3.2: Function Arguments",
    "text": "Exercise 3.2: Function Arguments\nThe function rnorm() can be used to simulate normally distributed data. The function mean() can be used to calculate the sample mean of the data, while the function sd() can be used to calculate the sample standard deviation. You will need to use the help files of these functions to complete the question.\n\nSimulate 100 numbers from a normal distribution with mean 0 and standard deviation 1 and store these in a vector called x1. Do this with the least amount of explicitly specified arguments as possible.\nSimulate 200 numbers from a normal distribution with mean 0 and standard deviation 5 and store these in a vector called x2. Do this with the least amount of explicitly specified arguments as possible.\nSimulate 80 numbers from a normal distribution with mean -6 and standard deviation 4 and store these in a vector called x3. Do this with the least amount of explicitly specified arguments as possible.\nCalculate the mean and standard deviation of each of the three series.\nSet the 10th value of x1 to NA. Calculate the mean and standard deviation again. What do you observe? Learn from the help function how we can fix this."
  },
  {
    "objectID": "Session3.html#the-argument",
    "href": "Session3.html#the-argument",
    "title": "Introduction to R",
    "section": "The … argument",
    "text": "The … argument\n\nIf you opened the help function of mean() before, you saw the last argument is\n\n“...      further arguments passed to or from other methods”\n\n... is a special argument: it allows you to put in different arguments that are then passed on to an other function internally.\nTo know how to put them correctly, you may need to look at the other function; not always easy!\nSince the function accepts any arguments in ..., an error message will typically be given at a ‘deeper level’, which can be very confusing. Or you even may not get an error message at all."
  },
  {
    "objectID": "Session3.html#exercise-3.2-function-arguments-revisited",
    "href": "Session3.html#exercise-3.2-function-arguments-revisited",
    "title": "Introduction to R",
    "section": "Exercise 3.2’: function arguments revisited",
    "text": "Exercise 3.2’: function arguments revisited\n\nRepeat the last part of the previous exercise, calculating the standard deviation for x1. Make sure to name the second argument of the function explicitly. Now intentionally misspell the name of the second argument and look at the error message.\nNow, do the same for calculating the mean; first do it correctly, then make an intentional mistake in the name of the argument.\nCan you explain the difference in results?"
  },
  {
    "objectID": "Session3.html#useful-functions-summary-descriptive-statistics",
    "href": "Session3.html#useful-functions-summary-descriptive-statistics",
    "title": "Introduction to R",
    "section": "Useful functions: summary / descriptive statistics",
    "text": "Useful functions: summary / descriptive statistics\n\noften you want to have a quick look at your data. Here are some useful functions for this purpose:\nFor (numerical) vectors:\n\n\n\n\nFunction\nDescription\n\n\n\n\nlength(v)\nNumber of elements in \\(v\\)\n\n\nmax(v)\nLargest value in \\(v\\)\n\n\nmin(v)\nSmallest value in \\(v\\)\n\n\nsum(v)\nSum of the elements of \\(v\\)\n\n\nprod(v)\nProduct of the elements of \\(v\\)\n\n\nmean(v)\nmean of the elements of \\(v\\)!\n\n\nsd(v)\nStandard deviation of the elements of \\(v\\)"
  },
  {
    "objectID": "Session3.html#useful-functions-summary-descriptive-statistics-1",
    "href": "Session3.html#useful-functions-summary-descriptive-statistics-1",
    "title": "Introduction to R",
    "section": "Useful functions: summary / descriptive statistics",
    "text": "Useful functions: summary / descriptive statistics\n\nOften you want to have a quick look at your data. Here are some useful functions for this purpose:\nFor matrices and data frames:\n\n\n\n\nFunction\nDescription\n\n\n\n\nnrow(D)\nNumber of rows in \\(D\\)\n\n\nncol(D)\nNumber of columns in \\(D\\)\n\n\nhead(D)\nDisplays the first few rows of \\(D\\)\n\n\ntail(D)\nDisplays the last few rows of \\(D\\)\n\n\nsummary(D)\nGives a summary of \\(D\\)\n\n\n\n\nFor numerical matrices and data frames:\n\n\n\n\nFunction\nDescription\n\n\n\n\ncolSums(D)\nSum of the elements in each column of \\(D\\)\n\n\nrowSums(D)\nSum of the elements in each row of \\(D\\)\n\n\ncolMeans(D)\nMean of the elements in each column of \\(D\\)\n\n\nrowMeans(D)\nMean of the elements in each row of \\(D\\)"
  },
  {
    "objectID": "Session3.html#structure-of-functions",
    "href": "Session3.html#structure-of-functions",
    "title": "Introduction to R",
    "section": "Structure of functions",
    "text": "Structure of functions\n\nFunctions in R have the following structure:\n\n\nfunction_name &lt;- function(argument1, argument2 = default_value, ...) {\n  Function body           # the operations that the function should do\n  return(function_output) # the output to be returned by the function\n}"
  },
  {
    "objectID": "Session3.html#a-simple-example-function",
    "href": "Session3.html#a-simple-example-function",
    "title": "Introduction to R",
    "section": "A simple example function",
    "text": "A simple example function\n\nThis function converts miles to kilometres:\n\n\nmiles_to_km &lt;- function(miles = 1){\n  km &lt;- 1.609344 * miles\n  return(km)\n}\n\n\nHow many kilometres is 60 miles?\n\n\nmiles_to_km(60)\n\n[1] 96.56064\n\n\n\nThe default value of miles is set to one, so executing the function without argument, gives you how many kilometres is equal to 1 mile:\n\n\nmiles_to_km()\n\n[1] 1.609344"
  },
  {
    "objectID": "Session3.html#multiple-function-outputs",
    "href": "Session3.html#multiple-function-outputs",
    "title": "Introduction to R",
    "section": "Multiple function outputs",
    "text": "Multiple function outputs\n\nR can only give one object as output.\nif you have multiple outputs, you have to combine them in one object.\nOften, the most natural choice for that is to use a list, as this can combine outputs of different nature."
  },
  {
    "objectID": "Session3.html#an-example-function-with-multiple-outputs",
    "href": "Session3.html#an-example-function-with-multiple-outputs",
    "title": "Introduction to R",
    "section": "An example function with multiple outputs",
    "text": "An example function with multiple outputs\n\nThis function converts miles to kilometres and to metres:\n\n\nmiles_to_metric &lt;- function(miles = 1){\n  km_miles &lt;- 1.609344 * miles\n  m_miles &lt;- 1000 * km_miles\n  out &lt;- list(km = km_miles, m = m_miles)\n  return(out)\n}\n\n\nHow many (kilo)metres is 60 miles?\n\n\nmiles_to_metric(60)\n\n$km\n[1] 96.56064\n\n$m\n[1] 96560.64"
  },
  {
    "objectID": "Session3.html#why-create-your-own-functions",
    "href": "Session3.html#why-create-your-own-functions",
    "title": "Introduction to R",
    "section": "Why create your own functions?",
    "text": "Why create your own functions?\n\nYou can perfectly get around R without ever creating your own functions.\nBut there are good reasons to do so:\n\nEasy if you need the same code repetitively;\nDecreases the probability of making mistakes, as you only need to write that piece of code once;\nYou can use your functions in different script later on.\n\nCreating functions is a basic skill well worth investing in.\nNote: make sure to first execute the lines containing your function before you use it (and execute again after an update to the code)."
  },
  {
    "objectID": "Session3.html#exercise-3.3-create-your-own-function",
    "href": "Session3.html#exercise-3.3-create-your-own-function",
    "title": "Introduction to R",
    "section": "Exercise 3.3: Create your own function",
    "text": "Exercise 3.3: Create your own function\n\nLoad the courses data frame, which contains information about several courses at a school of business and economics. If the file is located in a folder called “data” within your working directory, you can load it as\n\n\nload(\"data/courses.RData\")\n\n\nCreate a function that takes as input the courses data frame. The function output should be the total number of courses that use student tutors.\n\n\nThere are many ways to count the number of courses that require student tutors. Probably the easiest is to directly do calculations with the logical values: TRUE is treated as 1, FALSE as 0:\n\n\nc(TRUE + FALSE, TRUE + TRUE, TRUE * FALSE)\n\n[1] 1 2 0"
  },
  {
    "objectID": "Session3.html#exercise-3.3-create-your-own-function-1",
    "href": "Session3.html#exercise-3.3-create-your-own-function-1",
    "title": "Introduction to R",
    "section": "Exercise 3.3: Create your own function",
    "text": "Exercise 3.3: Create your own function\n\nWe now want to extend the function to give a second output. This output should contain a data frame with two columns: the first is the course code, the second is the number of tutorials for each course.\n\n\nThe number of tutorials should be calculated as the number of students divided by the number of students per tutorial group, and then rounded up.\nThe number of students per tutorial group should be a second argument of the function, with a default value of 15.\nTo round up, we can use the function ceiling()."
  },
  {
    "objectID": "Session3.html#objects-and-their-labels",
    "href": "Session3.html#objects-and-their-labels",
    "title": "Introduction to R",
    "section": "Objects and Their Labels",
    "text": "Objects and Their Labels\n\nObjects can be seen as a package: there is the actual content, and there is a label explaining the purpose of the object.\n\n\n\nWe can obtain the label from the function class()\nMany functions act differently, depending on the class of the input."
  },
  {
    "objectID": "Session3.html#the-summary-function",
    "href": "Session3.html#the-summary-function",
    "title": "Introduction to R",
    "section": "The summary function",
    "text": "The summary function\n\nWe can illustrate this using the summary() function.\nSummary on vectors:\n\n\nx &lt;- rnorm(100)\nsummary(x)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-2.22521 -0.81379 -0.29886 -0.06464  0.55693  2.81371"
  },
  {
    "objectID": "Session3.html#the-summary-function-1",
    "href": "Session3.html#the-summary-function-1",
    "title": "Introduction to R",
    "section": "The summary function",
    "text": "The summary function\n\nSummary on data frames:\n\n\nload(\"data/courses.RData\")\nsummary(courses)\n\n    Course          Coordinator            Code          \n Length:30          Length:30          Length:30         \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n                  Programme  Period  Enrollments     StudentTutors  \n Econometrics          :10   1:5    Min.   : 57.00   Mode :logical  \n Economics             :10   2:6    1st Qu.: 65.75   FALSE:19       \n International Business:10   3:4    Median :290.00   TRUE :11       \n                             4:6    Mean   :292.17                  \n                             5:5    3rd Qu.:412.50                  \n                             6:4    Max.   :610.00"
  },
  {
    "objectID": "Session3.html#the-summary-function-2",
    "href": "Session3.html#the-summary-function-2",
    "title": "Introduction to R",
    "section": "The summary function",
    "text": "The summary function\n\nSimilar ideas for functions such as plot(), print(), etc.\nThe output of summary is an object in itself:\n\n\nsumm_x &lt;- summary(x)\nclass(summ_x)\n\n[1] \"summaryDefault\" \"table\"         \n\n\nIn terms of content, this is just a (named) vector."
  },
  {
    "objectID": "Session3.html#behind-the-scenes-the-function.class-structure",
    "href": "Session3.html#behind-the-scenes-the-function.class-structure",
    "title": "Introduction to R",
    "section": "Behind the Scenes: the function.class structure",
    "text": "Behind the Scenes: the function.class structure\n\nBehind the scenes, R works as follows:"
  },
  {
    "objectID": "Session3.html#behind-the-scenes-the-function.class-structure-1",
    "href": "Session3.html#behind-the-scenes-the-function.class-structure-1",
    "title": "Introduction to R",
    "section": "Behind the Scenes: the function.class structure",
    "text": "Behind the Scenes: the function.class structure\n\nIf you start typing the summary() function name in RStudio, you will see that there are actually many summary functions …\n… among which summary.data.frame() and summary.matrix()\nIn principle, we need not bother with the system, but it can be useful to keep in mind for two cases:\n\n\nHelp files and documentation may differ depending on classes.\nApplying it to an object for which the class function has not been defined (“Why does summary() not work on my object X?”)."
  },
  {
    "objectID": "Session3.html#exercise-3.4-using-the-plot-function-for-different-objects",
    "href": "Session3.html#exercise-3.4-using-the-plot-function-for-different-objects",
    "title": "Introduction to R",
    "section": "Exercise 3.4: Using the plot function for different objects",
    "text": "Exercise 3.4: Using the plot function for different objects\n\nRemember your vector x1 of normally distributed random variables created in Exercise 3.2.\nMake a basic plot of this vector using the simple command plot(x1).\nNow transform your vector x1 into a time series object using the function ts(). Save it as x1ts.\nMake a plot of this new object using the command plot(x1ts). Why does it look different from before?\nMake a plot of the variable Period from the courses data frame (see Exercise 3.3). Explain why this looks yet again different."
  },
  {
    "objectID": "Session3.html#r-packages",
    "href": "Session3.html#r-packages",
    "title": "Introduction to R",
    "section": "R packages",
    "text": "R packages\n\nUntil now, we have explored some basic functionality in R. But much of the functionality of R is extended by its big and active community.\nThese extensions are called R packages.\nOne of R’s defining features is the richness of its package management system:\n\nPackages are constantly developed and adjusted by the large user community making many state-of-the-art methods quickly available\nPackages can be installed for just about everything you want to do in statistics and data science\nPackages offer pre-defined functions which makes it possible to use R without a deep understanding of the language and programming skills."
  },
  {
    "objectID": "Session3.html#overview-of-r-packages",
    "href": "Session3.html#overview-of-r-packages",
    "title": "Introduction to R",
    "section": "Overview of R packages",
    "text": "Overview of R packages\n\nThe standard distribution of R comes already with a number of packages.\nA list of the currently installed packages can be obtained from the Packages window in the bottom right window below\n\n\n\nYou can install new packages depending on your needs"
  },
  {
    "objectID": "Session3.html#installing-r-packages",
    "href": "Session3.html#installing-r-packages",
    "title": "Introduction to R",
    "section": "Installing R packages",
    "text": "Installing R packages\n\nTo install a new R package, click on the Install button at the top of the Packages window.\n\nYou can then type the name of the R package you want to install. Let us install the package this.path\n\nYou can use this R code also directly to install a package. The package is now added to to your package list and ready to be used.\n\ninstall.packages(\"this.path\", dependencies = TRUE)"
  },
  {
    "objectID": "Session3.html#loading-r-package",
    "href": "Session3.html#loading-r-package",
    "title": "Introduction to R",
    "section": "Loading R package",
    "text": "Loading R package\n\nInstalling an R package as we just did, only needs to be done once.\nYet each time you want to use the functionality of the R package in your current R session, you need to activate it. You can do this via the following command:\n\n\nlibrary(this.path)\n\n\nAfter activating the package nothing immediately happens, but R simply has access to the functionality that this.path offers."
  },
  {
    "objectID": "Session3.html#using-functions-from-a-package-without-loading-the-package",
    "href": "Session3.html#using-functions-from-a-package-without-loading-the-package",
    "title": "Introduction to R",
    "section": "Using functions from a package without loading the package",
    "text": "Using functions from a package without loading the package\n\nIt is also possible to use functions from a package without actually loading the package.\nAlthough generally you may not want to do this, it can sometimes be useful if you only need a single function; especially for a big package, you don’t need all functions stored in memory.\nThis can be done using the command\n\n\npackage_name::function_name()\n\nwhich can be interpreted as “use the function function_name() from the package package_name.”"
  },
  {
    "objectID": "Session3.html#exercise-3.5-r-package",
    "href": "Session3.html#exercise-3.5-r-package",
    "title": "Introduction to R",
    "section": "Exercise 3.5: R package",
    "text": "Exercise 3.5: R package\n\nIf you have not yet done, so, install the this.path package.\nWhy did we install the this.path package? Because it offers functionality to set your working directory, as an alternative to the menu-based approach we did before.\nTo set the working directory to the folder where your current R script is located, you can simply use:\n\n\nsetwd(this.path::here())\n\n\nCan you explain every step in this line?\nCan you think of an alternative way to achieve the same thing with the same functions?\nIt may be convenient to enter this at the top of your R script to ensure that you are always working in the directory where your R Script is located without having to type the name of the path!"
  },
  {
    "objectID": "Session3.html#digging-deeper-into-packages",
    "href": "Session3.html#digging-deeper-into-packages",
    "title": "Introduction to R",
    "section": "Digging Deeper into Packages",
    "text": "Digging Deeper into Packages\n\nWe have now seen that installing packages is straightforward. But how do I know which package I need?\nAnd how do packages function? Do they rely on other packages? Should I be bothered with this?\nLet’s have a deeper look."
  },
  {
    "objectID": "Session3.html#finding-good-packages",
    "href": "Session3.html#finding-good-packages",
    "title": "Introduction to R",
    "section": "Finding good packages",
    "text": "Finding good packages\n\nSometimes packages come recommended in books or articles.\nIf not, do a Google or ChatGPT search: ‘R package for reading Excel’; top search results are typically the most popular packages.\nUnsure about the quality? Some advice:\n\nConsider the authors. Are they respected academics? Or have a good track record of developing packages? These are good signs.\nRead the manuals / help files. Do they make sense? Are they written by someone who understands the important aspects of the methods?\nInstall and try them, and see if they match your expectations."
  },
  {
    "objectID": "Session3.html#more-about-packages",
    "href": "Session3.html#more-about-packages",
    "title": "Introduction to R",
    "section": "More about packages",
    "text": "More about packages\n\nMost of the time you need not need to be bothered by understanding the deeper meanings of the package, and you can just install it directly. But in case you do want to have a look, here are some things you can pay attention to.\n‘Official’ packages are hosted on the Comprehensive R Archive Network (CRAN).\nThe package homepage can be found as https://cran.r-project.org/package=package_name\nYou can find the same info after installing a package by clicking on the package name, then on ‘DESCRIPTION file’.\nImportant fields:\n\nMaintainer & Author: especially helpful for specialised packages, for which you expect the authors to be experts in the field.\nURL: Is there dedicated documentation? What is the quality of the documentation (often correlates with the quality of the package)?\nImports, Depends & LinkingTo: the packages needed to make the package work (installation is normally taken care of automatically).\nSuggests: packages that are not necessarily needed for using the package, but are needed for specific functionalities."
  },
  {
    "objectID": "Session3.html#checking-out-the-bootur-package",
    "href": "Session3.html#checking-out-the-bootur-package",
    "title": "Introduction to R",
    "section": "Checking out the bootUR package",
    "text": "Checking out the bootUR package"
  },
  {
    "objectID": "Session3.html#checking-out-the-bootur-package-1",
    "href": "Session3.html#checking-out-the-bootur-package-1",
    "title": "Introduction to R",
    "section": "Checking out the bootUR package",
    "text": "Checking out the bootUR package"
  },
  {
    "objectID": "Session3.html#checking-out-the-bootur-package-2",
    "href": "Session3.html#checking-out-the-bootur-package-2",
    "title": "Introduction to R",
    "section": "Checking out the bootUR package",
    "text": "Checking out the bootUR package"
  },
  {
    "objectID": "Session3.html#suggested-packages",
    "href": "Session3.html#suggested-packages",
    "title": "Introduction to R",
    "section": "Suggested packages",
    "text": "Suggested packages\n\nIt is up to the author to decide what packages to suggest, and what packages to list as imports.\nIt is also up to the author to protect the user from strange error messages while not having installed a suggested package.\nThis is not always done properly!\nSuggested packages are not always installed automatically!"
  },
  {
    "objectID": "Session3.html#installing-suggested-packages",
    "href": "Session3.html#installing-suggested-packages",
    "title": "Introduction to R",
    "section": "Installing suggested packages",
    "text": "Installing suggested packages\n\nThe command\n\n\ninstall.packages(\"package-name\")\n\ndoes not install suggested packages. Use instead\n\ninstall.packages(\"package-name\", dependencies = TRUE)\n\n\nIn RStudio, make sure that the box “Install dependencies” is checked."
  },
  {
    "objectID": "Session3.html#exercise-3.6-package-information-installation",
    "href": "Session3.html#exercise-3.6-package-information-installation",
    "title": "Introduction to R",
    "section": "Exercise 3.6: Package information & installation",
    "text": "Exercise 3.6: Package information & installation\n\nFind out who the maintainer is of the package bigtime.\nCheck if you have the suggested packages for bootUR installed. If you have ggplot2 installed, remove it from your installation. (This can be done by clicking at the right spot in RStudio’s Packages tab.)\nInstall the package bootUR in the ‘naive’ way using install.packages(\"bootUR\").\nThis package has a function to plot missing values in a time series dataset; apply this function to the data set that comes with the package. (This obviously implies you need to find both the function and the dataset.)\nYou will get an error message. Fix the error and repeat the steps above to produce a plot of the missing values."
  },
  {
    "objectID": "Session3.html#installing-packages-from-other-sources",
    "href": "Session3.html#installing-packages-from-other-sources",
    "title": "Introduction to R",
    "section": "Installing packages from (other) source(s)",
    "text": "Installing packages from (other) source(s)\n\nSometimes you might find a package not available on CRAN, but hosted on different platforms, such as GitHub.\nSuch packages have to be installed from ‘source’.\nOccasionally, CRAN may also ask you if you want to install a package from source, if a newer version is available than the standard binary package.\nInstalling from source is problematic on Windows and Mac, as it requires the installation of additional software for packages that are built on C/C++/Fortran code that needs compilation (see e.g. ?install.packages for details).\nAdvice for beginners: do not install from source!"
  },
  {
    "objectID": "Session3.html#bonus-exercise-3.7-installing-packages-from-source",
    "href": "Session3.html#bonus-exercise-3.7-installing-packages-from-source",
    "title": "Introduction to R",
    "section": "Bonus Exercise 3.7: Installing packages from source",
    "text": "Bonus Exercise 3.7: Installing packages from source\n\n\n\n\n\n\nImportant\n\n\nThis exercise should only be completed if you feel up for a challenge and want to get your system ready for installing from source. Please SKIP unless you know what you are doing!\n\n\n\n\nGo to https://github.com/Marga8/HDGCvar and follow the installation instructions to install the package HDGCvar from source. This should work on all systems.\nGo to https://github.com/RobertAdamek/desla and follow the installation instructions to install the package desla from source.\n\n\n\n\n\n\n\nCaution\n\n\nThis will most likely not work and result in errors.\n\n\n\n\nGo to https://github.com/smeekes/bootUR and read the extended installation instructions for installing from source. Install the missing software and then try to install the package desla again.\n\n\n\n\n\n\n\nWarning\n\n\nOn Windows, this should be relatively safe, but on Mac things still can go wrong. Be warned."
  },
  {
    "objectID": "Session3.html#flow-control",
    "href": "Session3.html#flow-control",
    "title": "Introduction to R",
    "section": "Flow Control",
    "text": "Flow Control\n\nOften, expressions (calculations, estimations, simulations, plots…) should only be executed under certain conditions and/or repeated multiple times.\nIn such cases, we need:\n\nConditional execution (if, else)\nLoops (for, while)"
  },
  {
    "objectID": "Session3.html#conditional-execution",
    "href": "Session3.html#conditional-execution",
    "title": "Introduction to R",
    "section": "Conditional Execution",
    "text": "Conditional Execution\n\nThe general syntax is as follows:\n\n\nif ( expr ) {\n  ## some code evaluated if expr == TRUE\n} else {\n  ## some other code\n}\n\n\nA simple example:\n\n\nx &lt;- 5\nif (x &gt; 0) {\n  y &lt;- 1       ## if x is positive, y should get value 1\n} else {\n  y &lt;- -1\n}\nprint(y)"
  },
  {
    "objectID": "Session3.html#conditional-execution-1",
    "href": "Session3.html#conditional-execution-1",
    "title": "Introduction to R",
    "section": "Conditional Execution",
    "text": "Conditional Execution\n\nBe careful with vector-valued expressions:\n\n\ny &lt;- c(5, 3, 2)\n\nif (y &gt; 4) {\n    print(\"All elements of y a larger than 4\")\n}\n\nError in if (y &gt; 4) {: the condition has length &gt; 1\n\n\nIf you want to check whether all elements of a vector satisfy a certain property, the quantifiers any() and all() are useful:\n\nif (all(y &gt; 4) ) {        ## all() is \"TRUE\" if the argument is a vector of all TRUE values\n    print(\"All y values are greater than 4\")\n} else {\n    print(\"At least one element of y is less than or equal to 4!\")\n}\n\n[1] \"At least one element of y is less than or equal to 4!\""
  },
  {
    "objectID": "Session3.html#conditional-execution-with-multipe-options",
    "href": "Session3.html#conditional-execution-with-multipe-options",
    "title": "Introduction to R",
    "section": "Conditional Execution with Multipe Options",
    "text": "Conditional Execution with Multipe Options\n\nThere may be more than two cases to consider, for example: \\[f(x) = \\cases{0 \\text{ for  } x \\leq 5\\\\\n              4 \\text{ for  } 0&lt; x \\leq 5\\\\\n              6 \\text{ otherwise.}}\\]\n\n\nstepfunction &lt;- function(x){\n  if ( x &lt;= 0 ) {\n      0\n  } else if (x &lt;= 5 ) {\n      4\n  } else {\n      6\n  }\n}"
  },
  {
    "objectID": "Session3.html#conditional-execution-per-element",
    "href": "Session3.html#conditional-execution-per-element",
    "title": "Introduction to R",
    "section": "Conditional Execution per Element",
    "text": "Conditional Execution per Element\n\nSometimes we want to check vectors and return a separate value for each entry. For this, we use the ifelse() function:\n\n\nx &lt;- c(3, NA, 2)\n## is.na() checks if the i put is a missing value\nifelse( is.na(x), \"Missing\", \"Not Missing\")\n\n[1] \"Not Missing\" \"Missing\"     \"Not Missing\"\n\n## an elaborate way to calculate absolute values!\nx &lt;- c(-3, 5, -8, 2)\nifelse( x &lt; 0, -x, x)\n\n[1] 3 5 8 2"
  },
  {
    "objectID": "Session3.html#exercise-3.8-conditional-execution",
    "href": "Session3.html#exercise-3.8-conditional-execution",
    "title": "Introduction to R",
    "section": "Exercise 3.8: Conditional Execution",
    "text": "Exercise 3.8: Conditional Execution\n\nWrite a function if_test that takes two objects, x and y, and checks whether x is numeric and y is of type character.\nIf both conditions are met, the function should print “Super”; otherwise, it should indicate which of the two objects x or y does not meet the required condition.\nTest your function with:\n\n\nif_test(5, \"char\")\n\nif_test(\"abc\", 2)\n\nif_test(list(1,2), matrix(\"a\", 3, 3))\n\n\nHint: Use is.character() and is.numeric()."
  },
  {
    "objectID": "Session3.html#loops",
    "href": "Session3.html#loops",
    "title": "Introduction to R",
    "section": "Loops",
    "text": "Loops\nFrequently, small code blocks need to be executed multiple times. Loops help with this. In R, there are multiple types of loops:\n\nwhile( Condition) { Code }: The code Code executes as long as Condition is TRUE.\nfor (counter in values) { Code }: The code Code runs once for each element in the vector values. The variable counter takes on the value of each element during each iteration."
  },
  {
    "objectID": "Session3.html#loops-examples",
    "href": "Session3.html#loops-examples",
    "title": "Introduction to R",
    "section": "Loops: Examples",
    "text": "Loops: Examples\n\nSome examples\n\n\nvec &lt;- c(\"One\",\"Two\",\"Three\")\nfor (v in vec) {\n    print(v)\n}\n\n[1] \"One\"\n[1] \"Two\"\n[1] \"Three\"\n\nfor (i in 1:5) {\n  print(i + 2)\n}\n\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7"
  },
  {
    "objectID": "Session3.html#combining-for-and-if",
    "href": "Session3.html#combining-for-and-if",
    "title": "Introduction to R",
    "section": "Combining for and if",
    "text": "Combining for and if\n\nThe combination of loops and conditional execution makes for a simple yet very powerful programming interface.\nThe major advantage is that it allows to automate certain repetitive operations.\nThis code checks for every column of a matrix (or data frame) dataset whether it is skewed to the right, and if so, applies a log transformation. (Which statistically is not the brightest idea…)\nWe use the moments package for calculating the skewness.\n\n\nlibrary(moments)\nn_col &lt;- ncol(dataset)      # check how many columns there are\ntransformed_data &lt;- dataset # copy the data into a new matrix holding the transformed data\nfor (i in 1:n_col) {        # loop over all columns\n    skew &lt;- skewness(dataset[, i])  # compute the skewness\n    if (skew &gt; 1) {\n        transformed_data[, i] &lt;- log(dataset[, i]) # log-transform the data\n    }\n}"
  },
  {
    "objectID": "Session3.html#exercise-3.9-impute-missing-values",
    "href": "Session3.html#exercise-3.9-impute-missing-values",
    "title": "Introduction to R",
    "section": "Exercise 3.9: Impute Missing Values",
    "text": "Exercise 3.9: Impute Missing Values\n\nWrite a function that checks for every element of a vector whether it is a missing value. If a missing value is found, it is to be imputed as the average of the value before it and the value after it.\nIf the first value in the vector is missing, it should get the value of the second element. If the last value is missing, it should get the value of the preceding element.\nTo keep things simple, we assume that there are never two consecutive missing values, search that only the rules are both have to be programmed.\nAlthough there are many ways to create such a function, we focus on using a for loop and if statements.\nTest your function on the following vector:\n\n\nc(NA, 2, 3, NA, 5, NA)"
  },
  {
    "objectID": "Session1.html#r-training-team",
    "href": "Session1.html#r-training-team",
    "title": "Introduction to R",
    "section": "R Training Team",
    "text": "R Training Team\n\nNalan Bastürk\nTobias Hartl\nMartin Schumann\nStephan Smeekes\nInes Wilms\n\nAll are econometricians at the Department of Quantitative Economics, and have many years of experience in R."
  },
  {
    "objectID": "Session1.html#r-training-team-tobias-hartl",
    "href": "Session1.html#r-training-team-tobias-hartl",
    "title": "Introduction to R",
    "section": "R Training Team: Tobias Hartl",
    "text": "R Training Team: Tobias Hartl\n\n\n\n\n\nAssistant Professor at QE\nResearch interests: econometrics, state space and factor models, long memory, macro- and climate econometrics\nWebsite\nNot physically present at sessions due to parental leave"
  },
  {
    "objectID": "Session1.html#r-training-team-martin-schumann",
    "href": "Session1.html#r-training-team-martin-schumann",
    "title": "Introduction to R",
    "section": "R Training Team: Martin Schumann",
    "text": "R Training Team: Martin Schumann\n\n\n\n\n\nAssistant Professor at QE\nResearch interests: panel data, nonlinear models, difference-in-differences, network data, innovation\nWebsite\nSessions 1 and 2"
  },
  {
    "objectID": "Session1.html#r-training-team-ines-wilms",
    "href": "Session1.html#r-training-team-ines-wilms",
    "title": "Introduction to R",
    "section": "R Training Team: Ines Wilms",
    "text": "R Training Team: Ines Wilms\n\n\n\n\n\nAssociate Professor at QE\nResearch interests: econometrics, time series, high-dimensional statisics, forecasting, outlier robustness\nWebsite\nSessions 1, 3 and 5"
  },
  {
    "objectID": "Session1.html#sbe-r-training",
    "href": "Session1.html#sbe-r-training",
    "title": "Introduction to R",
    "section": "SBE R Training",
    "text": "SBE R Training\n\nR is being used more and more in SBE teaching; master programmes use R extensively, bachelor programs are moving towards it.\nVery useful for statistical analysis in research as well.\nBig step to transition from “menu-based” software like SPSS to “script-based” software like R.\n\nNote: once familiar with R, step to transition to other similar software, like Python or Julia is much smaller.\n\nRequest by Education Institute to set up training to make the transition easier.\n\n\n\nFirst official edition of the training; your feedback will be crucial for improvements!"
  },
  {
    "objectID": "Session1.html#what-is-r",
    "href": "Session1.html#what-is-r",
    "title": "Introduction to R",
    "section": "What is R?",
    "text": "What is R?\nR\n\nis an open-source statistical programming language.\navailable for most operating systems\nhelps users analyze, visualize, and model data—from simple summaries to complex data analysis\nis extremely popular in statistics and data science, see this article\nincludes thousands of packages (add-ons) that can be used for specialized tasks without a deep understanding of the language and programming skills\nallows for extensive programming, making it also suitable for advanced or case-specific applications of statistical methods\n\nThe combination of the latter two aspects sets R apart and makes it useful for everything ranging from standard ‘basic’ statistical analysis to the development of new methods.\nThe homepage of R is www.r-project.org from which you can install R and access manuals that provide detailed information about installing and using R."
  },
  {
    "objectID": "Session1.html#r-installation",
    "href": "Session1.html#r-installation",
    "title": "Introduction to R",
    "section": "R Installation",
    "text": "R Installation\nTo install R, go to the Comprehensive R Archive Network CRAN. At the time of writing, it looks as follows:"
  },
  {
    "objectID": "Session1.html#r-installation-on-windows",
    "href": "Session1.html#r-installation-on-windows",
    "title": "Introduction to R",
    "section": "R Installation on Windows",
    "text": "R Installation on Windows\nTo download, for instance, R for Windows, you arrive at the following page:"
  },
  {
    "objectID": "Session1.html#r-installation-on-windows-1",
    "href": "Session1.html#r-installation-on-windows-1",
    "title": "Introduction to R",
    "section": "R Installation on Windows",
    "text": "R Installation on Windows\nNow download the latest version of R (version 4.5.0 at the time of writing):"
  },
  {
    "objectID": "Session1.html#r-installation-on-windows-2",
    "href": "Session1.html#r-installation-on-windows-2",
    "title": "Introduction to R",
    "section": "R Installation on Windows",
    "text": "R Installation on Windows\nStart the download process:"
  },
  {
    "objectID": "Session1.html#r-installation-on-windows-3",
    "href": "Session1.html#r-installation-on-windows-3",
    "title": "Introduction to R",
    "section": "R Installation on Windows",
    "text": "R Installation on Windows\nContinue the download process:"
  },
  {
    "objectID": "Session1.html#r-installation-on-windows-4",
    "href": "Session1.html#r-installation-on-windows-4",
    "title": "Introduction to R",
    "section": "R Installation on Windows",
    "text": "R Installation on Windows\nDownload completed:"
  },
  {
    "objectID": "Session1.html#r-installation-on-mac",
    "href": "Session1.html#r-installation-on-mac",
    "title": "Introduction to R",
    "section": "R Installation on Mac",
    "text": "R Installation on Mac\nChoose the right version for your Mac:"
  },
  {
    "objectID": "Session1.html#r-installation-on-mac-1",
    "href": "Session1.html#r-installation-on-mac-1",
    "title": "Introduction to R",
    "section": "R Installation on Mac",
    "text": "R Installation on Mac\nDownload the installation file and open it:"
  },
  {
    "objectID": "Session1.html#r-installation-on-mac-2",
    "href": "Session1.html#r-installation-on-mac-2",
    "title": "Introduction to R",
    "section": "R Installation on Mac",
    "text": "R Installation on Mac\nSimply click continue everywhere, the default installation is fine.\n\nWhen asked, enter your password and accept the license agreement."
  },
  {
    "objectID": "Session1.html#opening-r",
    "href": "Session1.html#opening-r",
    "title": "Introduction to R",
    "section": "Opening R",
    "text": "Opening R\nOpen R, you should see the following:"
  },
  {
    "objectID": "Session1.html#opening-r-1",
    "href": "Session1.html#opening-r-1",
    "title": "Introduction to R",
    "section": "Opening R",
    "text": "Opening R\nThe program window provides some basic information on R and the installed version.\nCheck your version of R!"
  },
  {
    "objectID": "Session1.html#r-console",
    "href": "Session1.html#r-console",
    "title": "Introduction to R",
    "section": "R Console",
    "text": "R Console\nThe R Console can be used to directly give in commands and display output:"
  },
  {
    "objectID": "Session1.html#r-prompt",
    "href": "Session1.html#r-prompt",
    "title": "Introduction to R",
    "section": "R Prompt",
    "text": "R Prompt\nUnder the default information, you can see the R prompt, through which R indicates that it is ready to execute a new command."
  },
  {
    "objectID": "Session1.html#executing-your-first-command",
    "href": "Session1.html#executing-your-first-command",
    "title": "Introduction to R",
    "section": "Executing your first command",
    "text": "Executing your first command\nStart by using R as a simple calculator, try to enter after the R prompt:\n\n2+3\n\nand hit enter.\nYou will see that R directly returns the output in the R console next to the ‘[1]’:\n\n2+3\n\n[1] 5\n\n\nIf you want to re-execute your previous command, use the arrow key ↑. To make changes to a command, you can use the ←, → arrows and re-execute. To move to the next command, use the ↓ arrow.\nFinally, when R receives an incomplete expression such as\n\n2+\n\nR will return the + symbol, thereby letting you know that you forgot to type something. You can either complete the command and then hit enter or exit the incomplete command via the esc button."
  },
  {
    "objectID": "Session1.html#exercise-1.1",
    "href": "Session1.html#exercise-1.1",
    "title": "Introduction to R",
    "section": "Exercise 1.1",
    "text": "Exercise 1.1\nEnter the following expressions, one by one, in R and hit enter to see how R evaluates them:\n\n2 + 3*4\n\n(2 + 3)*4\n\n(2 + 3*4\n\nsqrt(4)\n\npi"
  },
  {
    "objectID": "Session1.html#from-r-to-rstudio",
    "href": "Session1.html#from-r-to-rstudio",
    "title": "Introduction to R",
    "section": "From R to Rstudio",
    "text": "From R to Rstudio\nAfter taking your first steps in R, you might not be impressed by the design of the user interface and the way the software is used.\nThere are various user interfaces that work on top of plain R to make it more user friendly. A very popular one is RStudio."
  },
  {
    "objectID": "Session1.html#what-is-rstudio",
    "href": "Session1.html#what-is-rstudio",
    "title": "Introduction to R",
    "section": "What is RStudio?",
    "text": "What is RStudio?\nRStudio\n\nis an Integrated Development Environment (IDE) for R\nis a user-friendly interface for writing and running R code\nmakes it easier to write code, analyze data, create visuals, access documentation and manage projects\n\nIts homepage is https://posit.co/download/rstudio-desktop/"
  },
  {
    "objectID": "Session1.html#rstudio-installation-on-windows",
    "href": "Session1.html#rstudio-installation-on-windows",
    "title": "Introduction to R",
    "section": "RStudio Installation on Windows",
    "text": "RStudio Installation on Windows\nTo download RStudio, go to its download page. At the time of writing, it looks as follows:"
  },
  {
    "objectID": "Session1.html#rstudio-installation-on-windows-1",
    "href": "Session1.html#rstudio-installation-on-windows-1",
    "title": "Introduction to R",
    "section": "RStudio Installation on Windows",
    "text": "RStudio Installation on Windows\nStart the download process:"
  },
  {
    "objectID": "Session1.html#rstudio-installation-on-mac",
    "href": "Session1.html#rstudio-installation-on-mac",
    "title": "Introduction to R",
    "section": "RStudio Installation on Mac",
    "text": "RStudio Installation on Mac\nIf you open the (same) download page on Mac, you directly see the download button for Mac:"
  },
  {
    "objectID": "Session1.html#rstudio-installation-on-mac-1",
    "href": "Session1.html#rstudio-installation-on-mac-1",
    "title": "Introduction to R",
    "section": "RStudio Installation on Mac",
    "text": "RStudio Installation on Mac\nOpen the downloaded RStudio dmg file, and drag the RStudio icon into the applications folder:"
  },
  {
    "objectID": "Session1.html#opening-rstudio",
    "href": "Session1.html#opening-rstudio",
    "title": "Introduction to R",
    "section": "Opening RStudio",
    "text": "Opening RStudio\nOpen RStudio, you should see the following:"
  },
  {
    "objectID": "Session1.html#opening-rstudio-1",
    "href": "Session1.html#opening-rstudio-1",
    "title": "Introduction to R",
    "section": "Opening RStudio",
    "text": "Opening RStudio\nYou will recognize the R Console and see that RStudio is ready to receive input:"
  },
  {
    "objectID": "Session1.html#exercise-1.2",
    "href": "Session1.html#exercise-1.2",
    "title": "Introduction to R",
    "section": "Exercise 1.2",
    "text": "Exercise 1.2\nRe-execute the commands you executed before in R now in the R Console of RStudio:\n\n2 + 3*4\n\n(2 + 3)*4\n\n(2 + 3*4\n\nsqrt(4)\n\npi\n\nThe console in RStudio behaves exactly the same as the plain R window!"
  },
  {
    "objectID": "Session1.html#structure-in-rstudio",
    "href": "Session1.html#structure-in-rstudio",
    "title": "Introduction to R",
    "section": "Structure in RStudio",
    "text": "Structure in RStudio\nBut RStudio has much more to offer than plain R!\nRStudio (unlike R) is structured in different windows. You should currently see 3 windows:\n\nLeft: R console\nTop right: Display of objects in the global environment\nBottom right: Files, plots, packages, help, etc."
  },
  {
    "objectID": "Session1.html#rstudio-windows",
    "href": "Session1.html#rstudio-windows",
    "title": "Introduction to R",
    "section": "RStudio Windows",
    "text": "RStudio Windows\nThe 3 main windows (aka panes) in RStudio:"
  },
  {
    "objectID": "Session1.html#rstudio-menu-bar",
    "href": "Session1.html#rstudio-menu-bar",
    "title": "Introduction to R",
    "section": "RStudio Menu Bar",
    "text": "RStudio Menu Bar\nRStudio also has a Menu bar at the top:\n\nThe usefulness of these windows and menu bar in RStudio will become clear throughout this training."
  },
  {
    "objectID": "Session1.html#exercise-1.3",
    "href": "Session1.html#exercise-1.3",
    "title": "Introduction to R",
    "section": "Exercise 1.3",
    "text": "Exercise 1.3\nExplore the following quick tricks that the console in RStudio offers. After the prompt:\n\npress the ctrl button on Windows, or the command on Mac together with the arrow key ↑. What do you see?\n\nIt should give you a list of all previously executed commands. You can then use the ↑ and ↓ arrow keys to directly move to a certain command to repeat or correct it.\n\nstart to write sq and then hit the tabulator (tab) key ⇆ right after without an additional space. What do you see?\n\nIt should present you with a list of suggested commands together with a short description. You can then use the ↑ and ↓ arrow keys to navigate through them. Which one is the relevant one to compute the square root of a number? Choose the appropriate function, then hit enter to compute the square root of 100."
  },
  {
    "objectID": "Session1.html#need-for-r-scripts",
    "href": "Session1.html#need-for-r-scripts",
    "title": "Introduction to R",
    "section": "Need for R Scripts",
    "text": "Need for R Scripts\nSuppose you want to continue your work tomorrow. If you would now close RStudio, all of your work would be gone!\nTo avoid this problem, we will not give commands directly in the R console, but save them in an R Script."
  },
  {
    "objectID": "Session1.html#what-is-an-r-script",
    "href": "Session1.html#what-is-an-r-script",
    "title": "Introduction to R",
    "section": "What is an R Script?",
    "text": "What is an R Script?\nWhile many simple calculations can be done using the command line, as soon as things get more complicated, scripts should be used.\nAn R Script\n\nis a plain text file that contains a collection of R commands\nis written in such a form to perform commands in a step by step fashion\ncontains all commands including those for importing data, analyzing data, visualizing data or other tasks\ncan be saved as a .R file\nallows you to automate and reproduce your work, allowing you to run the same analysis without having to redo each step manually again\nmakes your work organized, shareable and transparent!"
  },
  {
    "objectID": "Session1.html#creating-an-r-script",
    "href": "Session1.html#creating-an-r-script",
    "title": "Introduction to R",
    "section": "Creating an R Script",
    "text": "Creating an R Script\nCreating an R Script is easy.\nUsing the menu bar, go to File -&gt; New File -&gt; R Script:\n\nAlternatively, you could have used the shortcut ctrl+shift+N on Windows or command+shift+N on Mac."
  },
  {
    "objectID": "Session1.html#structure-in-rstudio-1",
    "href": "Session1.html#structure-in-rstudio-1",
    "title": "Introduction to R",
    "section": "Structure in RStudio",
    "text": "Structure in RStudio\nRStudio now displays 4 windows, with the R Script currently displayed in the top left:"
  },
  {
    "objectID": "Session1.html#r-script",
    "href": "Session1.html#r-script",
    "title": "Introduction to R",
    "section": "R Script",
    "text": "R Script\nCurrently the R Script is Untitled, we should give it a name."
  },
  {
    "objectID": "Session1.html#exercise-1.4",
    "href": "Session1.html#exercise-1.4",
    "title": "Introduction to R",
    "section": "Exercise 1.4",
    "text": "Exercise 1.4\nGive your R Script a name and save it. Go to File -&gt; Save As…:"
  },
  {
    "objectID": "Session1.html#r-working-directory",
    "href": "Session1.html#r-working-directory",
    "title": "Introduction to R",
    "section": "R Working Directory",
    "text": "R Working Directory\nBefore we start working in our R Script, let us first set the working directory in R.\nThe working directory is the location on your computer where R will read and save files. Go to Session -&gt; Set Working Directory. Two convenient options are:\n\nChoose Directory…: Choose the directory yourself\nTo Source File Location: Set the working directory to the directory where your R Script (the source file) is saved"
  },
  {
    "objectID": "Session1.html#r-working-directory-1",
    "href": "Session1.html#r-working-directory-1",
    "title": "Introduction to R",
    "section": "R Working Directory",
    "text": "R Working Directory\nSelect the option to set the working directory to the source file location. You will see that a command automatically pops up in the R console, something like:\n\nsetwd(\"C:/Rtraining\")\n\nYou can use this command directly next time. Mind the usage of the / when specifying the path of your working directory!\nYou can also include comment lines in your R script. These start with the symbol # and allow you to document your code. For instance:\n\n# Setting my working directory\nsetwd(\"C:/Rtraining\")"
  },
  {
    "objectID": "Session1.html#exercise-1.5",
    "href": "Session1.html#exercise-1.5",
    "title": "Introduction to R",
    "section": "Exercise 1.5",
    "text": "Exercise 1.5\nCopy some of the commands you previously executed into your R Script.\nExecute a specific line\n\nby pressing the Run button to execute the line on which your cursor is currently located\nby using ctrl+enter on Windows or command+enter on Mac to execute the line on which your cursor is currently located\n\n\nYou can execute multiple lines by highlighting them all and doing one of the above. Try this."
  },
  {
    "objectID": "Session1.html#exercise-1.6",
    "href": "Session1.html#exercise-1.6",
    "title": "Introduction to R",
    "section": "Exercise 1.6",
    "text": "Exercise 1.6\nYou can adjust the sizes and positioning of the windows (panes) according to your liking.\nGo to Tools, Global Options… and then select Pane Layout from which you can adjust the positioning of each of the 4 panes by selecting them from the drop-down menus\n\nExperiment with a different positioning and re-adjust according to your liking."
  },
  {
    "objectID": "Session1.html#r-package-management-system",
    "href": "Session1.html#r-package-management-system",
    "title": "Introduction to R",
    "section": "R Package Management System",
    "text": "R Package Management System\nUntil now, we have explored some basic functionality in R. But much of the functionality of R is extended by its big and active community.\nThese extensions are called R packages"
  },
  {
    "objectID": "Session1.html#what-are-r-packages",
    "href": "Session1.html#what-are-r-packages",
    "title": "Introduction to R",
    "section": "What are R packages?",
    "text": "What are R packages?\nR packages\n\nare constantly developed and adjusted by the large user community making many state-of-the-art methods quickly available\ncan be installed for just about everything you want to do in statistics and data science\noffer pre-defined functions which makes it possible to use R without a deep understanding of the language and programming skills."
  },
  {
    "objectID": "Session1.html#overview-of-r-packages",
    "href": "Session1.html#overview-of-r-packages",
    "title": "Introduction to R",
    "section": "Overview of R packages",
    "text": "Overview of R packages\nThe standard distribution of R comes already with a number of packages.\nA list of the currently installed packages can be obtained from the Packages window in the bottom right window below\n\nYou can install new packages depending on your needs. We will explore R packages in the upcoming sessions!"
  },
  {
    "objectID": "Session5.html#data-manipulation",
    "href": "Session5.html#data-manipulation",
    "title": "Introduction to R",
    "section": "Data Manipulation",
    "text": "Data Manipulation\nIn the last session, we learned how to load data of various sources into R.\nToday’s first part will be about how to manipulate data in R. Importantly, we will learn how to\n\nselect certain variables from a data\nsubset a data set\nrecode and rename certain variables\n\nWe will work with fictive data set of student grades. Let us start by loading the data:\n\ndata_grades &lt;- read.table(\"data/grades.csv\", \n                       header = TRUE, sep = \",\", stringsAsFactors = FALSE)"
  },
  {
    "objectID": "Session5.html#selecting-variables",
    "href": "Session5.html#selecting-variables",
    "title": "Introduction to R",
    "section": "Selecting Variables",
    "text": "Selecting Variables\nWe begin with selecting interesting variables from a data set. For our grades data set, we want to preserve information about ID, Name, and Exam_Score, and drop all other information.\nVariables can be selected by name, after which we inspect the first and last three rows in the data set:\n\ndata &lt;- data_grades[, c(\"ID\", \"Name\", \"Exam_Score\")] \nhead(data, 3)\n\n      ID                Name Exam_Score\n1 i40333 Hyden-Terry, Dakota         55\n2 i41204     Polson, Destiny         82\n3 i41428       al-Azad, Nuha         52\n\ntail(data, 3)\n\n        ID             Name Exam_Score\n40 i198051      Nies, Tyler         62\n41 i198310 Montano, Marquez         72\n42 i198859  Nyberg, Bich Sa         91"
  },
  {
    "objectID": "Session5.html#selecting-variables-1",
    "href": "Session5.html#selecting-variables-1",
    "title": "Introduction to R",
    "section": "Selecting Variables",
    "text": "Selecting Variables\nOr by variable indexes\n\ndata1 &lt;- data_grades[, c(1, 2, 7)] \n\nthough this is not that convenient unless you know the column numbers of the variables you want to select.\nA more convenient alternative is to use the following function:\n\ndata2 &lt;- subset(data_grades, select = c(ID, Name, Exam_Score))\n\nThe objects data, data1 and data2 are all identical so you can use your preferred way of working!"
  },
  {
    "objectID": "Session5.html#subsetting-rows",
    "href": "Session5.html#subsetting-rows",
    "title": "Introduction to R",
    "section": "Subsetting Rows",
    "text": "Subsetting Rows\nNext, we want to subset the data set, i.e. preserve interesting rows while removing the others.\nFor the grades data set, we might be interested in information about students in tutorial group 1:\n\n# select tutorial 1 students only\ndata_tutorial1 &lt;- data_grades[data_grades$Tutorial == 1, ]\n\nor alternatively:\n\ndata_tutorial1 &lt;- subset(data_grades, Tutorial == 1)\n\nSubsetting also works using characters. For instance, to retrieve only information for females:\n\n# select female students only\ndata_females &lt;- data_grades[data_grades$Gender == 'Female', ]\n\nInspect your new data sets!"
  },
  {
    "objectID": "Session5.html#exercise-5.1",
    "href": "Session5.html#exercise-5.1",
    "title": "Introduction to R",
    "section": "Exercise 5.1",
    "text": "Exercise 5.1\nUse the grades data set.\n\nGenerate a data set that contains information about the student ID, student name, their tutorial group, participation grade and their exam score.\nReduce the data set to only display information of students in tutorial group 4\nFurther reduce the data set to only display information of students in tutorial group 4 with an exam score of more than 80. How many such students are there? Hint: You can use a logical operator when subsetting!"
  },
  {
    "objectID": "Session5.html#transforming-variables",
    "href": "Session5.html#transforming-variables",
    "title": "Introduction to R",
    "section": "Transforming Variables",
    "text": "Transforming Variables\nLet us continue with further data manipulations. The variable tutorial is currently an integer:\n\nclass(data_grades$Tutorial)\n\n[1] \"integer\"\n\n\nbut it should be a factor (a categorical variable). This can be easily changed in R:\n\ndata_grades$Tutorial &lt;- as.factor(data_grades$Tutorial)\n\nafter which you can inspect its new class:\n\nclass(data_grades$Tutorial)\n\n[1] \"factor\""
  },
  {
    "objectID": "Session5.html#transforming-variables-1",
    "href": "Session5.html#transforming-variables-1",
    "title": "Introduction to R",
    "section": "Transforming Variables",
    "text": "Transforming Variables\nWhen inspecting the variable itself, R now mentions the different levels of the factors:\n\ndata_grades$Tutorial\n\n [1] 2 3 4 2 1 4 3 1 1 3 4 2 4 4 3 1 3 4 1 2 1 1 3 1 3 3 2 3 2 1 4 4 4 2 3 2 2 4\n[39] 4 2 1 3\nLevels: 1 2 3 4\n\n\nwhich you can also directly retreive via:\n\nlevels(data_grades$Tutorial)\n\n[1] \"1\" \"2\" \"3\" \"4\""
  },
  {
    "objectID": "Session5.html#adding-variables",
    "href": "Session5.html#adding-variables",
    "title": "Introduction to R",
    "section": "Adding Variables",
    "text": "Adding Variables\nSometimes we want to add a variable to an existing data set.\nFor instance, we want to add the exam score on 10 instead of 100. To add a new variable, use the $ operator and specify a new variable name:\n\ndata_grades$Exam_Score_10 &lt;- data_grades$Exam_Score/10 \n\nhead(data_grades[, c(\"Exam_Score\", \"Exam_Score_10\")], 3)\n\n  Exam_Score Exam_Score_10\n1         55           5.5\n2         82           8.2\n3         52           5.2"
  },
  {
    "objectID": "Session5.html#exercise-5.2",
    "href": "Session5.html#exercise-5.2",
    "title": "Introduction to R",
    "section": "Exercise 5.2",
    "text": "Exercise 5.2\n\nWhat is the class of the variable Tutor? Transform it into a factor. How many tutors are there?\nAdd a new variable to compute the final score of each student, which is the weighted average of their participation grade (20%) and their exam score (80%)\nRetrieve the final score of the students in tutorial group 2. Obtain summary statistics of their final scores.\nWhat is the lowest and the highest score in tutorial group 2? Retrieve this information from the summary statistics as well as by using a dedicated function."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About the SBE R Training",
    "section": "",
    "text": "Purpose\n\nWhat to Expect\nThe purpose of this course is to provide a gentle introduction to R suitable for academic staff members. The main target group is teachers and researchers who teach or use some form of data analysis / statistics in their courses, but are unfamiliar with R, for example because they have been using software like SPSS, Excel or Stata for their statistical analysis.\n\n\nWhat Not to Expect\n\nBasic statistical training. Participants are expected to have a basic understanding of statistics.\nAdvanced use of R that requires substantial programming. While we may touch upon this briefly depending on the interests of the participants, more advanced treatment is outside the scope of the training.\n\n\n\n\nSessions\nWe have scheduled 5 hands-on sessions of 2 hours each. The sessions are interactive, guided by two of the trainers, with plenty of opportunity for asking questions and further interactions. No preparation is needed outside of these sessions. The focus will be on understanding the language conceptually, rather than covering a wide range of statistical tools.\n\nContent\n\nTuesday June 10, 13:30-15:30: Installing R The first session will discuss how to get R up and running. We will cover the actual installation of R and RStudio on different operating systems. Next, we will cover the basics to get R working, specifically, how to use the console and writing scripts.\nThursday June 12, 13:30-15:30: R Objects Using different types of objects is at the heart of R. This session will go into the different type of objects that users encounter, such as vectors, lists and data frames.\nMonday June 16, 13:30-15:30: Using Functions and Packages When using R as a statistical tool rather than a programming language, proper use of built-in functions and packages is key. This session will cover how to use general functions, explain the way arguments should be entered, and how output objects should be interpreted. We discuss the philosophy of R’s object-oriented system, and show how operations can be performed on different type of objects. We also go into the package management system.\nWednesday June 18, 10:30-12:30: Input, Output and Graphics In the session, we will focus on how to load data into R from different types of sources. We also discuss how to export results from an analysis from R to other programs. Finally, we cover how to make professional figures and plots using R’s graphical capabilities.\nFriday June 20, 10:30-12:30: Data Manipulation and (Regression) Analysis The first part of the session will focus on typical manipulations of data stats that may be needed as preprocessing steps before a statistical analysis. The second part of the session we will apply some basic statistical analysis tools. We focus on the linear regression model, the workhorse of empirical economic research. To enable practitioners to efficiently estimate the linear regression model in R, we cover objects of class formula and OLS estimation via the lm() command.\n\n\n\nOptional Topics\nDepending on the progress and interests of the participants, we have 2 optional more advanced topics, that can be integrated into the sessions:\n\nAdvanced Graphics: This topic covers more advanced use of R’s graphics capabilities such as the ggplot2 package.\nFlow Control: Often we want to execute certain commands conditionally and / or repeatedly. This requires conditional evaluation and loops, which are covered under the topic of flow control.\n\n\n\n\nPreparation\n\nFirst Meeting\nNo preparation is needed; all that we ask is that participants bring a laptop on which they can install and use R. There is no need to install things in advance, we will guide you through installation during the first session.\n\n\nMissed Meetings\nFor people attending all sessions, no preparation is needed between the sessions. For people missing sessions, we strongly recommend going through the material on your own, as sessions build up consecutively. As we are still finetuning the content, we cannot promise to have the sessions complete and available more than a day before each session. If this is a problem, please contact us directly to see what we can do."
  },
  {
    "objectID": "Session4.html#session-overview",
    "href": "Session4.html#session-overview",
    "title": "Introduction to R",
    "section": "Session Overview",
    "text": "Session Overview\n\nInputs and Outputs\nGraphics\nBonus: Advanced Graphics with ggplot"
  },
  {
    "objectID": "Session4.html#today",
    "href": "Session4.html#today",
    "title": "Introduction to R",
    "section": "Today",
    "text": "Today\nNalan Bastürk\n\n\n\n\n\nAssociate Professor at QE\nResearch interests: econometrics, Bayesian statisics, financial econometrics\nWebsite\nSessions 4 and 5\n\n\nStephan Smeekes\n\n\n\n\n\nProfessor of Econometrics at QE\nResearch interests: econometrics, time series, high-dimensional statisics, bootstrap, macro- and climate econometrics\nWebsite\nSessions 2, 3 and 4"
  },
  {
    "objectID": "Session4.html#inputs-and-outputs-of-your-r-session",
    "href": "Session4.html#inputs-and-outputs-of-your-r-session",
    "title": "Introduction to R",
    "section": "Inputs and outputs of your R session",
    "text": "Inputs and outputs of your R session\n\nCommon inputs / outputs of an R session are datasets or R scripts.\nFor this meeting we focus on datasets as inputs to the R session, loading data and saving data.\nThe file format (csv, Rdata, xls, stata …) and directory of the files are important keep in mind.\nWe will go over a few options, potential issues, and how to avoid the need to type in a long directory name when managing the input and output of the R session."
  },
  {
    "objectID": "Session4.html#working-directories-and-r-projects",
    "href": "Session4.html#working-directories-and-r-projects",
    "title": "Introduction to R",
    "section": "Working directories and R projects",
    "text": "Working directories and R projects\n\nWhenever we provide R with a file name, it can include the full path on the computer.\nAn alternative is to work on a specified directory.\nAnother alternative is to work within a ‘project’ that all paths are visible to the project scripts.\nIf we do not provide any path, R will use the current “working directory” for reading or writing files. It can be obtained by the command\n\n\n  getwd()"
  },
  {
    "objectID": "Session4.html#using-the-correct-directory-to-get-input-output-of-the-r-session",
    "href": "Session4.html#using-the-correct-directory-to-get-input-output-of-the-r-session",
    "title": "Introduction to R",
    "section": "Using the correct directory to get input / output of the R session",
    "text": "Using the correct directory to get input / output of the R session\n\nNavigating through the menus in RStudio is easy, (click and go) but requires using the menu every time the user runs the code.\nGo to Session -&gt; Set Working Directory. Two convenient options are:\n\nChoose Directory…: Choose the directory yourself\nTo Source File Location: Set the working directory to the directory where your R Script (the source file) is saved"
  },
  {
    "objectID": "Session4.html#using-the-correct-directory-to-get-input-output-of-the-r-session-1",
    "href": "Session4.html#using-the-correct-directory-to-get-input-output-of-the-r-session-1",
    "title": "Introduction to R",
    "section": "Using the correct directory to get input / output of the R session",
    "text": "Using the correct directory to get input / output of the R session\n\nAn alternative is to use function setwd() at the beginning of your script. This line then has to be changed when the code runs in another machine.\n\n\n setwd(\"~/ownCloud (2)/Teaching/Rprogramming_UM/Rprogramming_UM\")"
  },
  {
    "objectID": "Session4.html#using-the-correct-directory-to-get-input-output-of-the-r-session-2",
    "href": "Session4.html#using-the-correct-directory-to-get-input-output-of-the-r-session-2",
    "title": "Introduction to R",
    "section": "Using the correct directory to get input / output of the R session",
    "text": "Using the correct directory to get input / output of the R session\n\nRecall: To set the working directory to the folder where your current R script is located, you can simply use:\n\n\nlibrary(this.path)\nsetwd(here()))\n\n\nRecall: We could also explicitly make the function call from the library:\n\n\nsetwd(this.path::here()))"
  },
  {
    "objectID": "Session4.html#types-of-input-or-data-that-can-be-loaded-in-r",
    "href": "Session4.html#types-of-input-or-data-that-can-be-loaded-in-r",
    "title": "Introduction to R",
    "section": "Types of input or data that can be loaded in R",
    "text": "Types of input or data that can be loaded in R\nR interacts with files in several ways.\n\nYou can load, save, import, or export a data file.\nYou can save a generated figure as a graphics file or store regression tables as text, spreadsheet, or LATEX tables.\nYou can load, save the full workspace (environment) you are working with to follow up another time.\n\nDatasets can come in different formats.\n\nRdata files: Files that can directly\nOther file formats (SPSS csv, xls, …) are also possible to load in R. This often requires the use of packages"
  },
  {
    "objectID": "Session4.html#loading-rdata-files",
    "href": "Session4.html#loading-rdata-files",
    "title": "Introduction to R",
    "section": "Loading Rdata files",
    "text": "Loading Rdata files\n\nRdata files are specific to R file formats.\nThey can store a single object or several objects.\nThese files are the easiest to manage as input or output in R, since they don’t require library calls."
  },
  {
    "objectID": "Session4.html#load-climate-data-from-rdata-format",
    "href": "Session4.html#load-climate-data-from-rdata-format",
    "title": "Introduction to R",
    "section": "Load climate data from RData format:",
    "text": "Load climate data from RData format:\n\nload function is used to load data in Rdata format.\nload function loads all objects in the input Rdata file.\n\n\nload(\"data/climate_Maas_Eind.Rdata\")\nprint(summary(data_short))\n\n       X             STNID               NAME               CTRY          \n Min.   : 87132   Length:2896        Length:2896        Length:2896       \n 1st Qu.: 88219   Class :character   Class :character   Class :character  \n Median : 92226   Mode  :character   Mode  :character   Mode  :character  \n Mean   : 93638                                                           \n 3rd Qu.: 96234                                                           \n Max.   :100154                                                           \n COUNTRY_NAME          ISO2C              ISO3C              LATITUDE    \n Length:2896        Length:2896        Length:2896        Min.   :50.91  \n Class :character   Class :character   Class :character   1st Qu.:50.91  \n Mode  :character   Mode  :character   Mode  :character   Median :51.18  \n                                                          Mean   :51.18  \n                                                          3rd Qu.:51.45  \n                                                          Max.   :51.45  \n   LONGITUDE       ELEVATION          BEGIN               END          \n Min.   :5.375   Min.   : 22.55   Min.   :19490101   Min.   :20240909  \n 1st Qu.:5.375   1st Qu.: 22.55   1st Qu.:19490101   1st Qu.:20240909  \n Median :5.572   Median : 68.42   Median :19490101   Median :20240909  \n Mean   :5.572   Mean   : 68.42   Mean   :19490101   Mean   :20240909  \n 3rd Qu.:5.770   3rd Qu.:114.30   3rd Qu.:19490101   3rd Qu.:20240909  \n Max.   :5.770   Max.   :114.30   Max.   :19490101   Max.   :20240909  \n   YEARMODA              YEAR          MONTH             DAY       \n Length:2896        Min.   :2021   Min.   : 1.000   Min.   : 1.00  \n Class :character   1st Qu.:2021   1st Qu.: 4.000   1st Qu.: 8.00  \n Mode  :character   Median :2022   Median : 7.000   Median :16.00  \n                    Mean   :2022   Mean   : 6.523   Mean   :15.71  \n                    3rd Qu.:2023   3rd Qu.:10.000   3rd Qu.:23.00  \n                    Max.   :2024   Max.   :12.000   Max.   :31.00  \n      YDAY             TEMP       TEMP_ATTRIBUTES DEWP_ATTRIBUTES\n Min.   :  1.00   Min.   :-8.50   Min.   : 7.00   Min.   : 7.00  \n 1st Qu.: 92.75   1st Qu.: 6.90   1st Qu.:24.00   1st Qu.:24.00  \n Median :183.00   Median :11.45   Median :24.00   Median :24.00  \n Mean   :183.10   Mean   :11.69   Mean   :23.88   Mean   :23.88  \n 3rd Qu.:274.00   3rd Qu.:16.80   3rd Qu.:24.00   3rd Qu.:24.00  \n Max.   :366.00   Max.   :30.00   Max.   :24.00   Max.   :24.00  \n SLP_ATTRIBUTES     STP_ATTRIBUTES     VISIB_ATTRIBUTES WDSP_ATTRIBUTES\n Min.   : 0.00000   Min.   : 0.00000   Min.   : 7.00    Min.   : 7.00  \n 1st Qu.: 0.00000   1st Qu.: 0.00000   1st Qu.:24.00    1st Qu.:24.00  \n Median : 0.00000   Median : 0.00000   Median :24.00    Median :24.00  \n Mean   : 0.03729   Mean   : 0.03729   Mean   :23.87    Mean   :23.88  \n 3rd Qu.: 0.00000   3rd Qu.: 0.00000   3rd Qu.:24.00    3rd Qu.:24.00  \n Max.   :13.00000   Max.   :13.00000   Max.   :24.00    Max.   :24.00  \n      MAX            I_FOG        I_RAIN_DRIZZLE     I_SNOW_ICE     \n Min.   :-5.00   Min.   :0.0000   Min.   :0.0000   Min.   :0.00000  \n 1st Qu.:10.20   1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.00000  \n Median :16.00   Median :0.0000   Median :1.0000   Median :0.00000  \n Mean   :15.94   Mean   :0.1381   Mean   :0.6454   Mean   :0.04385  \n 3rd Qu.:22.00   3rd Qu.:0.0000   3rd Qu.:1.0000   3rd Qu.:0.00000  \n Max.   :39.50   Max.   :1.0000   Max.   :1.0000   Max.   :1.00000  \n     I_HAIL           I_THUNDER       I_TORNADO_FUNNEL       ES       \n Min.   :0.000000   Min.   :0.00000   Min.   :0        Min.   :0.300  \n 1st Qu.:0.000000   1st Qu.:0.00000   1st Qu.:0        1st Qu.:1.000  \n Median :0.000000   Median :0.00000   Median :0        Median :1.350  \n Mean   :0.004489   Mean   :0.07562   Mean   :0        Mean   :1.478  \n 3rd Qu.:0.000000   3rd Qu.:0.00000   3rd Qu.:0        3rd Qu.:1.900  \n Max.   :1.000000   Max.   :1.00000   Max.   :0        Max.   :4.200"
  },
  {
    "objectID": "Session4.html#load-climate-data-from-rdata-format-1",
    "href": "Session4.html#load-climate-data-from-rdata-format-1",
    "title": "Introduction to R",
    "section": "Load climate data from RData format:",
    "text": "Load climate data from RData format:\n\nYou can assign the loaded data to a new variable\n\n\ndata &lt;- load(\"data/climate_Maas_Eind.Rdata\")"
  },
  {
    "objectID": "Session4.html#loading-other-formats-of-data-in-r",
    "href": "Session4.html#loading-other-formats-of-data-in-r",
    "title": "Introduction to R",
    "section": "Loading other formats of data in R",
    "text": "Loading other formats of data in R\nOption 1: Using menus within RStudio is the easiest (click and go) but requires using the menu every time the user runs the code."
  },
  {
    "objectID": "Session4.html#loading-other-formats-of-data-in-r-1",
    "href": "Session4.html#loading-other-formats-of-data-in-r-1",
    "title": "Introduction to R",
    "section": "Loading other formats of data in R",
    "text": "Loading other formats of data in R\nOption 1: Using menus within RStudio (cont’d)"
  },
  {
    "objectID": "Session4.html#loading-other-formats-of-data-in-r-2",
    "href": "Session4.html#loading-other-formats-of-data-in-r-2",
    "title": "Introduction to R",
    "section": "Loading other formats of data in R",
    "text": "Loading other formats of data in R\nOption 1: Using menus within RStudio (cont’d)"
  },
  {
    "objectID": "Session4.html#loading-other-formats-of-data-in-r-3",
    "href": "Session4.html#loading-other-formats-of-data-in-r-3",
    "title": "Introduction to R",
    "section": "Loading other formats of data in R",
    "text": "Loading other formats of data in R\nOption 1: Using menus within RStudio (cont’d)"
  },
  {
    "objectID": "Session4.html#loading-other-formats-of-data-in-r-4",
    "href": "Session4.html#loading-other-formats-of-data-in-r-4",
    "title": "Introduction to R",
    "section": "Loading other formats of data in R",
    "text": "Loading other formats of data in R\nAdvice for option 1:\n\nCopy the command that appears after loading the data from the menus."
  },
  {
    "objectID": "Session4.html#loading-other-formats-of-data-in-r-5",
    "href": "Session4.html#loading-other-formats-of-data-in-r-5",
    "title": "Introduction to R",
    "section": "Loading other formats of data in R",
    "text": "Loading other formats of data in R\nAdvice for option 1 (cont’d):\n\nPaste the command on top of your script.\nThis way, next time you do not need the menu navigation.\n\n\nlibrary(readxl)\nclimate &lt;- read_excel(\"data/climate.xlsx\")\n\n\nYou can view the data by clicking on it in the `Environment’ at the top-right of the workspace."
  },
  {
    "objectID": "Session4.html#general-way-of-importing-and-exporting-of-other-data-formats",
    "href": "Session4.html#general-way-of-importing-and-exporting-of-other-data-formats",
    "title": "Introduction to R",
    "section": "General way of importing and exporting of other data formats",
    "text": "General way of importing and exporting of other data formats\n\nUsing the correct libraries for different data formats can be tedious.\nR package rio is very convenient for data import and export. It figures out the type of data format from the file name extension, e.g. .csv for CSV, .dta for Stata, or *.sav for SPSS data sets\nFor a complete list of supported formats, see help(rio).\nIt calls an appropriate package to do the actual importing or exporting."
  },
  {
    "objectID": "Session4.html#loading-spss-and-other-file-types",
    "href": "Session4.html#loading-spss-and-other-file-types",
    "title": "Introduction to R",
    "section": "Loading SPSS and other file types",
    "text": "Loading SPSS and other file types\n\nlibrary('rio')\nimport(\"data/climate.dta\")"
  },
  {
    "objectID": "Session4.html#loading-csv-files",
    "href": "Session4.html#loading-csv-files",
    "title": "Introduction to R",
    "section": "Loading csv files",
    "text": "Loading csv files\n\nimport(\"data/climate.csv\")"
  },
  {
    "objectID": "Session4.html#outputs",
    "href": "Session4.html#outputs",
    "title": "Introduction to R",
    "section": "Outputs",
    "text": "Outputs\n\nOutputs work very similarly to the inputs above.\nThe most relevant outputs formats are the R output formats.\nsave() saves objects as an .RData file.\nsave.image() saves a selection of objects as an .RData file."
  },
  {
    "objectID": "Session4.html#exercise-4.1-saving-data",
    "href": "Session4.html#exercise-4.1-saving-data",
    "title": "Introduction to R",
    "section": "Exercise 4.1: Saving data",
    "text": "Exercise 4.1: Saving data\n\nSave your current workspace using function save.image().\nSave only one variable in the workspace using function save().\nMake a list of two variables from data_short, and save this list using function save."
  },
  {
    "objectID": "Session4.html#r-base-graphics",
    "href": "Session4.html#r-base-graphics",
    "title": "Introduction to R",
    "section": "R Base Graphics",
    "text": "R Base Graphics\n\nWe will cover R base graphics.\nOther alternatives include `ggplot2’…\n\nTo create plots with R’s standard graphics package, there are high-level and low-level plotting functions.\n\nHigh-level functions generate a new graphic (and open a device).\nLow-level functions add elements to an existing graphic."
  },
  {
    "objectID": "Session4.html#simple-plots",
    "href": "Session4.html#simple-plots",
    "title": "Introduction to R",
    "section": "Simple plots",
    "text": "Simple plots\n\nplot(data_short$MAX)     ## Plotting a single variable\n\n\n\n\n\n\n\nplot(x = data_short$YEAR, y = data_short$MAX)     ## Scatter plot"
  },
  {
    "objectID": "Session4.html#multiple-plots",
    "href": "Session4.html#multiple-plots",
    "title": "Introduction to R",
    "section": "Multiple plots",
    "text": "Multiple plots\n\npar(mfrow = c(1,2)) # multiple plots in a row\nplot(data_short$MAX)     ## Plotting a single variable\nplot(x = data_short$YEAR, y = data_short$MAX)     ## Scatter plot"
  },
  {
    "objectID": "Session4.html#functions-calling-methods",
    "href": "Session4.html#functions-calling-methods",
    "title": "Introduction to R",
    "section": "Functions calling methods",
    "text": "Functions calling methods\nNotice that function plot() calls methods.\nIt will perform different operations depending on the class of the passed object. (We study the lm() function in detail in the next session!)\n\nols_result &lt;- lm(MAX~YEAR, data = data_short)\nplot(ols_result)"
  },
  {
    "objectID": "Session4.html#creating-and-saving-a-graph",
    "href": "Session4.html#creating-and-saving-a-graph",
    "title": "Introduction to R",
    "section": "Creating and saving a graph",
    "text": "Creating and saving a graph\n\npdf(\"outputs/plot_data_short.pdf\")                  \nhist(data_short$MAX, breaks = 20)\ndev.off()"
  },
  {
    "objectID": "Session4.html#customizing-graphics",
    "href": "Session4.html#customizing-graphics",
    "title": "Introduction to R",
    "section": "Customizing Graphics",
    "text": "Customizing Graphics\n\nAdding points to an existing plot\nFunction `dev.off()’is called after all the plotting, to save the file and return control to the screen.\n\n\nplot(data_short$MAX, type = \"l\") ## Lines\npoints(data_short$MAX)"
  },
  {
    "objectID": "Session4.html#customizing-graphics-1",
    "href": "Session4.html#customizing-graphics-1",
    "title": "Introduction to R",
    "section": "Customizing Graphics",
    "text": "Customizing Graphics\n\nThe plot() function takes several many arguments that can change the layout of the plots. See ?par for all graphical options; there are many!\nSome examples:\n\ncol: color of lines / points\nlty, lwd: Line type and thickness\npch: Point type (1-16)\nmain, sub: Title, subtitle\nxlab, ylab: x and y axis labels\nlog, xlog and ylog for logarithmic scales\nxlim, ylim: x and y axis limits (for overriding R’s default choices)\nmfcol, mfrow: Multiple plots in one graphics window (column-wise/row-wise)"
  },
  {
    "objectID": "Session4.html#low-level-graphic-functions",
    "href": "Session4.html#low-level-graphic-functions",
    "title": "Introduction to R",
    "section": "Low-Level Graphic Functions",
    "text": "Low-Level Graphic Functions\n\nlines: Draw lines\nabline: Quickly add horizontal, vertical lines, and lines using equation \\(y = bx + a\\)\npoints: Add points\narrows: Add arrows"
  },
  {
    "objectID": "Session4.html#exercise-4.2-plot-maximum-temperatures-for-maastricht",
    "href": "Session4.html#exercise-4.2-plot-maximum-temperatures-for-maastricht",
    "title": "Introduction to R",
    "section": "Exercise 4.2: Plot maximum temperatures for Maastricht",
    "text": "Exercise 4.2: Plot maximum temperatures for Maastricht\nWe want to visualize the daily maximum temperatures in the climate data data_short specifically for Maastricht. First, make a basic plot of variable and MAX then customise the plot in the following ways:\n\nThe title of the X-axis should say ‘Year’, the title of the Y-axis ‘Maximum Temperature’.\nMake the plot a line plot with a blue line. (Hint: specifying the colour literally as \"blue\" works)\nMake the tick marks appear on the inside of the figure rather than the outside.\nCalculate the average temperature.\nAdd a horizontal line with the average maximum temperature\n\nYou will need to consult the help file for this exercise; see this therefrom more as an exercise in how to navigate R’s help system, than an exercise in plotting (which we will cover in more detail later).\nYou may want to ask ChatGPT for help and then try to see if you could also have gotten the same answer yourself; it may not always give you the most straightforward answer though!"
  },
  {
    "objectID": "Session4.html#manually-saving-r-plots",
    "href": "Session4.html#manually-saving-r-plots",
    "title": "Introduction to R",
    "section": "Manually saving R plots",
    "text": "Manually saving R plots\n\nUse the plot functions without creating a graph.\nUse the `plots’ area to save image manually.\n\n\nplot(x = data_short$YEAR, y = data_short$MAX)"
  },
  {
    "objectID": "Session4.html#different-plot-types",
    "href": "Session4.html#different-plot-types",
    "title": "Introduction to R",
    "section": "Different plot types",
    "text": "Different plot types\nYou can manually save graphs of several formats.\nBest practice is to save a graph through a device such as pdf or similar:\n\npdf(): Adobe PDF (easily integrated into LaTeX).\nsvg(): Scalable Vector Graphics (commonly used on websites).\npng(), jpeg(), tiff(), bmp(): Various bitmap formats.\n\n\njpeg(\"outputs/plot_data_short.jpeg\")                  \nplot(x = data_short$YEAR, y = data_short$MAX)   \ndev.off()"
  },
  {
    "objectID": "Session4.html#exercise-4.3-use-other-packages-for-plots",
    "href": "Session4.html#exercise-4.3-use-other-packages-for-plots",
    "title": "Introduction to R",
    "section": "Exercise 4.3: Use other packages for plots",
    "text": "Exercise 4.3: Use other packages for plots\n\nMake the same plot in R using package `ggplot2’\nYou may want to use ChatGBT since the syntax of `ggplot2’ is quite different from what we covered so far."
  },
  {
    "objectID": "Session2.html#r-training-team-today",
    "href": "Session2.html#r-training-team-today",
    "title": "Introduction to R",
    "section": "R Training Team Today",
    "text": "R Training Team Today\nMartin Schumann\n\n\n\n\n\nAssistant Professor at QE\nResearch interests: panel data, nonlinear models, difference-in-differences, network data, innovation\nWebsite\nSessions 1 and 2\n\n\nStephan Smeekes\n\n\n\n\n\nProfessor of Econometrics at QE\nResearch interests: econometrics, time series, high-dimensional statisics, bootstrap, macro- and climate econometrics\nWebsite\nSessions 2, 3 and 4"
  },
  {
    "objectID": "Session2.html#objects-1",
    "href": "Session2.html#objects-1",
    "title": "Introduction to R",
    "section": "Objects",
    "text": "Objects\n\nIn R, everything is an object.\nObjects have a name that is assigned with &lt;- (recommended) or =.\nNames have to start with a letter and include only letters, numbers, and characters such as “.” and “_”.\nR is case sensitive: \\(\\Rightarrow Name\\neq name\\)!\nObjects can store vectors, matrices, lists, data frames, functions…\n\n\n# generate object x (no output):\nx &lt;- 5\n# display log(x)\nlog(x)\n\n[1] 1.609438\n\n\n\n# object X is not defined =&gt; error message \nX\n\nError: object 'X' not found"
  },
  {
    "objectID": "Session2.html#vectors-1",
    "href": "Session2.html#vectors-1",
    "title": "Introduction to R",
    "section": "Vectors",
    "text": "Vectors\n\nVectors can store multiple types of information (e.g., numbers or “characters”).\nTo define a 3-dimensional vector named “vec”, use vec &lt;- c(value1, value2, value3).\nOperators and functions can be applied to vectors, which means they are applied to each of the elements individually.\n\n\n# define vector named 'vec'\nvec &lt;- c(1, 2, 3)\n# take the square root of 'vec' and store the result in 'sqrt_vec'\nsqrt_vec &lt;- sqrt(vec)\n# display sqrt_vec\nprint(sqrt_vec)\n\n[1] 1.000000 1.414214 1.732051"
  },
  {
    "objectID": "Session2.html#vectors---some-helpful-shortcuts",
    "href": "Session2.html#vectors---some-helpful-shortcuts",
    "title": "Introduction to R",
    "section": "Vectors - some helpful shortcuts",
    "text": "Vectors - some helpful shortcuts\n\nR has built-in functions that generate sequences (useful for loops or plots, among other things).\nWe can also repeat elements using rep().\n\n\n# generate sequence 5,6,...,10\n5:10\n\n[1]  5  6  7  8  9 10\n\n# generate sequence from 1 to 10 in steps of 0.5\nseq(from = 1, to = 5, by = 0.5)\n\n[1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0\n\n#generate 4-dimensional vector of ones\nrep(1, 4)\n\n[1] 1 1 1 1"
  },
  {
    "objectID": "Session2.html#order-matters",
    "href": "Session2.html#order-matters",
    "title": "Introduction to R",
    "section": "Order matters!",
    "text": "Order matters!\n\nBe aware of the order of operations!\ncompare the following:\n\n\n1+2:3^2 # '^2' evaluated before ':', only then '+1' is evaluated\n\n[1]  3  4  5  6  7  8  9 10\n\n1+2:3*4 # first ':', then '*4', then '+1'\n\n[1]  9 13\n\n# use brackets to avoid confusion or mistakes\n(1+2):(3*4)\n\n [1]  3  4  5  6  7  8  9 10 11 12"
  },
  {
    "objectID": "Session2.html#summarizing-vectors",
    "href": "Session2.html#summarizing-vectors",
    "title": "Introduction to R",
    "section": "Summarizing vectors",
    "text": "Summarizing vectors\n\nR has built-in functions to summarize the information stored in vectors.\nRemark: R is very good at generating random numbers! (Such functions are studied in more detail in the next session.)\n\n\n# Example: generate 100 random draws from a normal distribution with mean 1\n# and standard deviation 2\nnorm.vec &lt;- rnorm(n = 100, mean = 1, sd = 2)\n# get mean \nmean(norm.vec)\n\n[1] 0.767044\n\n# get standard deviation \nsd(norm.vec)\n\n[1] 2.111653\n\n# get maximum\nmax(norm.vec)\n\n[1] 5.737621"
  },
  {
    "objectID": "Session2.html#exercise-2.1-generating-and-summarizing-vectors",
    "href": "Session2.html#exercise-2.1-generating-and-summarizing-vectors",
    "title": "Introduction to R",
    "section": "Exercise 2.1: generating and summarizing vectors",
    "text": "Exercise 2.1: generating and summarizing vectors\n\ndraw 50 random numbers from a normal distribution with mean 0 and variance 1. Store your results in the object norm.vec.\ncalculate the mean and standard deviation of norm.vec.\nuse rep() to repeat each element of norm.vec 3 times. Store the result in the object norm.vec.rep.\nIs mean(norm.vec.rep^2) equal to mean(norm.vec.rep)^2?"
  },
  {
    "objectID": "Session2.html#logical-operators",
    "href": "Session2.html#logical-operators",
    "title": "Introduction to R",
    "section": "logical operators",
    "text": "logical operators\n\nlogical operators can be either TRUE or FALSE.\nExtremely useful for conditional statements, e.g. if(condition is TRUE){do this}else{do that}.\nWe can check if two objects are equal by ==, different by != or compare them with &lt; and &gt;.\nWe can combine logical statements with “AND” & and “OR” |\n\n\n# define  objects \nobj1 &lt;- 1\nobj2 &lt;- 2\nobj3 &lt;- 1 # same value as obj1\nobj1 == obj2 # false statement\n\n[1] FALSE\n\nobj1 != obj2 # true statement\n\n[1] TRUE\n\nobj1 == obj2 & obj1 == obj3 # FALSE AND TRUE =&gt; FALSE\n\n[1] FALSE\n\nobj1 == obj2 | obj1 == obj3 # FALSE OR TRUE =&gt; TRUE\n\n[1] TRUE"
  },
  {
    "objectID": "Session2.html#characters",
    "href": "Session2.html#characters",
    "title": "Introduction to R",
    "section": "Characters",
    "text": "Characters\n\nVectors can also store characters.\ncharacters are enclosed in \"\"or ''.\n\n\n# define a vector of 2 cities\ncities &lt;- c('Maastricht', \"Amsterdam\",'Rotterdam')\nprint(cities)\n\n[1] \"Maastricht\" \"Amsterdam\"  \"Rotterdam\""
  },
  {
    "objectID": "Session2.html#exercise-2.2-type-coersion",
    "href": "Session2.html#exercise-2.2-type-coersion",
    "title": "Introduction to R",
    "section": "Exercise 2.2: type coersion",
    "text": "Exercise 2.2: type coersion\n\nR tries to make objects comparable by coercing one object into the type of another.\nThis can sometimes be handy, but sometimes it leads to unforeseen errors (e.g., when loading new data). To illustrate this, do the following:\n\ncompare the character \"1\" to the numeric 1.\ntry computing the sum of \"1\" and \"2\".\ntry computing the sum of as.numeric(\"1\") and as.numeric(\"2\"). What happened?\ncreate a mixed vector containing the numeric 1 and the character \"2\". Of which type are the elements of the vector?"
  },
  {
    "objectID": "Session2.html#factors",
    "href": "Session2.html#factors",
    "title": "Introduction to R",
    "section": "factors",
    "text": "factors\n\nMany variables are qualitative rather than quantitative.\nWhile they are often coded using numbers, they don’t have a numerical meaning.\nExamples: gender, nationality…\nCan also be ordinal, i.e., the outcomes can be ranked (e.g., “bad”, “meh”, “great”).\n\n\nx &lt;- c(1, 3, 3, 2, 1, 3)\nxf &lt;- factor(x, labels = c(\"bad\", \"ok\", \"good\"))# no ranking\nxf\n\n[1] bad  good good ok   bad  good\nLevels: bad ok good\n\n# now with ranking\nxf.ordered &lt;- factor(x, labels = c(\"bad\", \"ok\", \"good\"), ordered = TRUE)\nxf.ordered\n\n[1] bad  good good ok   bad  good\nLevels: bad &lt; ok &lt; good"
  },
  {
    "objectID": "Session2.html#names",
    "href": "Session2.html#names",
    "title": "Introduction to R",
    "section": "Names",
    "text": "Names\n\nYou can give the elements of your vector names either directly or using the names() command.\nThis is very useful for accessing elements (see nect slide)\n\n\navg_temp &lt;- c(Maastricht = 14.2, Amsterdam = 13.4, Rotterdam = 13.7)\nprint(avg_temp) # names appear on top of elements\n\nMaastricht  Amsterdam  Rotterdam \n      14.2       13.4       13.7 \n\nnames(avg_temp) # returns names of elements\n\n[1] \"Maastricht\" \"Amsterdam\"  \"Rotterdam\" \n\n# Alternatively, we can define data and names separately\ntemp &lt;- c(14.2, 13.4, 13.7)\nnames(temp) &lt;- cities # recall that we have defined \"cities\" earlier!\nprint(temp)\n\nMaastricht  Amsterdam  Rotterdam \n      14.2       13.4       13.7"
  },
  {
    "objectID": "Session2.html#accessing-elements",
    "href": "Session2.html#accessing-elements",
    "title": "Introduction to R",
    "section": "Accessing elements",
    "text": "Accessing elements\n\nOne can access the elements of a vector either by name or position.\n\n\n# return the second element of \"avg_temp\" defined before\navg_temp[2] \n\nAmsterdam \n     13.4 \n\n# return the element corresponding to \"Maastricht\"\navg_temp[\"Maastricht\"]\n\nMaastricht \n      14.2 \n\n# trying to access a non-existing element yields \"NA\"\n# ( for \"not available\"), i.e. a missing value\navg_temp[4]\n\n&lt;NA&gt; \n  NA"
  },
  {
    "objectID": "Session2.html#more-on-na-nan-inf",
    "href": "Session2.html#more-on-na-nan-inf",
    "title": "Introduction to R",
    "section": "More on NA, NaN, Inf",
    "text": "More on NA, NaN, Inf\n\nNA (“not available”) indicates missing values.\nAnything combined with NA yields NA.\nNaN(“not a number”) indicates the result of a mathematically undefined operation.\n\n\n#define another vector\nvec3 &lt;- c(-1.2, NA, 0)\n# combine avg_temp and vec3\nvec4 &lt;- c(avg_temp, vec3) \n# divide elements by 0; notice the different outcomes\nvec4 / 0 \n\nMaastricht  Amsterdam  Rotterdam    Tilburg                                  \n       Inf        Inf        Inf        Inf       -Inf         NA        NaN"
  },
  {
    "objectID": "Session2.html#matrices-1",
    "href": "Session2.html#matrices-1",
    "title": "Introduction to R",
    "section": "Matrices",
    "text": "Matrices\n\nWe can create a matrix with m rows directly using matrix(vector,nrow=m).\n\n\n# create matrix with 3 rows; fill numbers by row\nmat1 &lt;- matrix(1:12, nrow = 3, byrow = TRUE) # by default, R fills matrices by column\nmat1\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    2    3    4\n[2,]    5    6    7    8\n[3,]    9   10   11   12"
  },
  {
    "objectID": "Session2.html#matrix-indexing",
    "href": "Session2.html#matrix-indexing",
    "title": "Introduction to R",
    "section": "Matrix indexing",
    "text": "Matrix indexing\n\nWe can give the rows and columns names using rownames() and colnames().\n\n\n# assign names to columns\ncolnames(mat1) &lt;- c(\"col1\", \"col2\", \"col3\", \"col4\")\nmat1\n\n     col1 col2 col3 col4\n[1,]    1    2    3    4\n[2,]    5    6    7    8\n[3,]    9   10   11   12\n\n# assign names to rows\nrownames(mat1) &lt;- c(\"row1\",\"row2\",\"row3\")\nmat1\n\n     col1 col2 col3 col4\nrow1    1    2    3    4\nrow2    5    6    7    8\nrow3    9   10   11   12"
  },
  {
    "objectID": "Session2.html#accessing-elements-1",
    "href": "Session2.html#accessing-elements-1",
    "title": "Introduction to R",
    "section": "Accessing elements",
    "text": "Accessing elements\n\nWe can access single elements by [rownumber,colnumber], the k-th row by [k,] and the k-th column by [,k].\n\n\n# get element in second row in third column\nmat1[2,3]\n\n[1] 7\n\n# get second row\nmat1[2,]\n\ncol1 col2 col3 col4 \n   5    6    7    8 \n\n# get third column\nmat1[,3]\n\nrow1 row2 row3 \n   3    7   11"
  },
  {
    "objectID": "Session2.html#exercise-2.3-creating-matrices-accessing-elements",
    "href": "Session2.html#exercise-2.3-creating-matrices-accessing-elements",
    "title": "Introduction to R",
    "section": "Exercise 2.3: creating matrices, accessing elements",
    "text": "Exercise 2.3: creating matrices, accessing elements\n\nCreate the 3x3 identity matrix “by hand”. To do so:\n\ncreate 3 vectors of with zeros and ones in the appropriate spots.\nuse rbind() or cbind() to combine them into the identity matrix.\nstore the identity matrix as the object “I_mat”.\nR makes your life easy: type diag(3) in your console.\n\nReplicate the following Excel-matrix:\n\n\n 3. Get the data for April and May by - including only the first and second row - excluding the third row - using the names"
  },
  {
    "objectID": "Session2.html#bonus-matrix-algebra",
    "href": "Session2.html#bonus-matrix-algebra",
    "title": "Introduction to R",
    "section": "Bonus: Matrix algebra",
    "text": "Bonus: Matrix algebra\n\nR can do matrix “regular” algebra, and even lets you do operations that are not well-defined mathematically.\nt(A) is the transpose of the matrix A.\n\n\n# define matrix containing normal data\ndata.vec &lt;- rnorm(9, mean = 0, sd = 1)\nA &lt;- matrix(data.vec, nrow = 3)\nA # return A\n\n          [,1]       [,2]       [,3]\n[1,]  1.520550  0.7848033  0.2458953\n[2,] -1.347184 -1.9176178 -0.7027760\n[3,] -0.205259  0.6375446 -0.1060013\n\nt(A) # return the transpose\n\n          [,1]      [,2]       [,3]\n[1,] 1.5205499 -1.347184 -0.2052590\n[2,] 0.7848033 -1.917618  0.6375446\n[3,] 0.2458953 -0.702776 -0.1060013"
  },
  {
    "objectID": "Session2.html#lists-1",
    "href": "Session2.html#lists-1",
    "title": "Introduction to R",
    "section": "Lists",
    "text": "Lists\n\nA list is a generic collection of objects.\nUnlike vectors, the components can have different types (e.g., numeric and character).\nMany functions output lists, so knowing how to access elements is very useful.\nGenerate a list with mylist&lt;- list(name1=component1, name2=component2,...).\n\n\nmylist &lt;- list(num.vec = 1:3, city = \"Maastricht\") \nprint(mylist)\n\n$num.vec\n[1] 1 2 3\n\n$city\n[1] \"Maastricht\""
  },
  {
    "objectID": "Session2.html#data-frames",
    "href": "Session2.html#data-frames",
    "title": "Introduction to R",
    "section": "Data frames",
    "text": "Data frames\n\ndata frames are simply data sets in R terminology.\nSo-called data files can contain multiple data sets.\nWe can create a data frame by data.frame() or transform a matrix mat into a data frame by as.data.frame(mat).\nMany functions (e.g. lm() for regressions) need a data frame as input (see later sessions).\n\n\n# generate a data frame\nID &lt;- 1:4\nhourly_wage &lt;- rnorm(n = 4, mean = 20, sd = 1) # create 4 draws from N(20,1)\ncity &lt;- c(\"Maastricht\", \"Eindhoven\", \"Amsterdam\", NA)\ndats &lt;- data.frame(ID, hourly_wage, city) # add new variable\ndats\n\n  ID hourly_wage       city\n1  1    20.43265 Maastricht\n2  2    21.24930  Eindhoven\n3  3    19.53891  Amsterdam\n4  4    19.18459       &lt;NA&gt;"
  },
  {
    "objectID": "Session2.html#exercise-2.4",
    "href": "Session2.html#exercise-2.4",
    "title": "Introduction to R",
    "section": "Exercise 2.4",
    "text": "Exercise 2.4\n\nCreate your own data frame:\n\ncreate a vector ID that contains the sequence 1,2,…,100.\ncreate a vector income that contains 100 random draws from N(10,1).\ncreate a dummy female that is 1 for ID=1,...,50 and 0 otherwise. (hint: you can achieve this by using rep() twice and combining two vectors with c())\ncollect the variables in a data frame my_df.\ninspect your data with View(my_df)\nbonus: create a subset sub_my_df that contains only individuals with income larger than 10."
  },
  {
    "objectID": "Session2.html#bonus-teaching-regression-with-r",
    "href": "Session2.html#bonus-teaching-regression-with-r",
    "title": "Introduction to R",
    "section": "Bonus: teaching regression with R",
    "text": "Bonus: teaching regression with R\n\nTo give students a feeling for the behavior of the least squares estimator, it can be very useful to use simulated data.\nThis allows teachers to visualize the effects of various quantities of interest, e.g., sample size, variation in the observed and unobserved variables, or omitted variables.\n\n\nn &lt;- 100 # set the sample size\nX &lt;- rnorm(n, mean = 1, sd = 2)# define the observed covariate X\nepsilon &lt;- rnorm(n, mean = 0, sd = 1) # define the model error\nbeta0 &lt;- 1 # define true intercept\nbeta1 &lt;- 2 # define true slope\nY &lt;- beta0 + beta1 * X + epsilon # generate Y according to a linear model\n# recall the formula in a bivariate model\nbeta1.hat &lt;- cov(X,Y) / var(X)\nbeta0.hat &lt;- mean(Y) - beta1.hat * mean(X)\n# print estimators\nbeta0.hat\n\n[1] 1.044901\n\nbeta1.hat\n\n[1] 1.944837"
  },
  {
    "objectID": "files.html",
    "href": "files.html",
    "title": "Additional Files",
    "section": "",
    "text": "What can you find here?\nOn this page, you can find additional files that are needed or useful in the five sessions. This includes datasets that are used, as well as (rudimentary) solutions to the exercises.\n\n\nDatasets\nHere you can find the data sets that are used in the sessions.\n\n\n\n\n\n\nWhere to Store Datasets\n\n\n\nThe R code provided in the sessions assumes that datasets are stored in a folder called ‘data’ located within your working directory.\n\n\n\nSession 1\nNo datasets used\n\n\nSession 2\nNo datasets used\n\n\nSession 3\n\ncourses.RData\n\n\n\nSession 4\nTo follow\n\n\nSession 5\nTo follow\n\n\n\nSolutions\nHere we post solutions to the exercises in the sessions. The files are eventually kept very basic, only having the necessary code. The files, therefore, have very little meaning on their own, but might be useful to consult during the sessions.\n\nSession 1\nTo follow\n\n\nSession 2\nTo follow\n\n\nSession 3\nTo follow\n\n\nSession 4\nTo follow\n\n\nSession 5\nTo follow"
  }
]